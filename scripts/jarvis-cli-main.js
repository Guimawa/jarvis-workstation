#!/usr/bin/env node

// ==============================================
// üß† JARVIS ULTRA INSTINCT CLI - Interface de Commande Principale
// ==============================================
// Version: 2.0.0
// Auteur: Jarvis Expert
// Description: Interface CLI Ultra Instinct pour g√©n√©rer du code React/Next.js
// avec int√©gration Storybook, tests et design system Tailwind/shadcn
// ==============================================

import "dotenv/config";
import { program } from "commander";
import fs from "fs";
import path from "path";
import chalk from "chalk";
import figlet from "figlet";
import inquirer from "inquirer";
import { spawn } from "child_process";
import { fileURLToPath } from "url";

// Importation des modules internes
import GroqClient from "./src/utils/groq-client.js";
import ReactGenerator from "./src/generators/react-gen.js";
import StorybookGenerator from "./src/generators/storybook-gen.js";
import TestGenerator from "./src/generators/test-gen.js";
import MemorySystem from "./src/core/memory.js";
import CodeValidator from "./src/utils/validators.js";
import CodeFormatter from "./src/utils/formatters.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration initiale
program
  .version("2.0.0")
  .description(
    "Jarvis Ultra Instinct - Assistant de g√©n√©ration de code React/Next.js",
  );

// Fonction d'affichage de la banni√®re
function displayBanner() {
  console.log(
    chalk.blue(
      figlet.textSync('Jarvis Expert', {
        font: 'Big',
        horizontalLayout: 'default',
        verticalLayout: 'default'
      })
    )
  );
  console.log(chalk.green('üß† Assistant intelligent de g√©n√©ration de code\n'));
}

// Commande principale: g√©n√©rer un composant
program
  .command('generate <type>')
  .alias('g')
  .description('G√©n√©rer un √©l√©ment (component, page, hook, etc.)')
  .option('-n, --name <name>', 'Nom de l√©l√©ment √† g√©n√©rer')
  .option('-d, --dir <directory>', 'R√©pertoire de destination', 'src/components')
  .option('-t, --typescript', 'Utiliser TypeScript', false)
  .option('--no-storybook', 'Ne pas g√©n√©rer de story Storybook')
  .option('--no-tests', 'Ne pas g√©n√©rer de tests')
  .action(async (type, options) => {
    displayBanner();
    
    try {
      // V√©rification des pr√©requis
      await checkPrerequisites();
      
      // Si le nom n'est pas fourni, on le demande
      if (!options.name) {
        const answers = await inquirer.prompt([
          {
            type: 'input',
            name: 'name',
            message: `Quel nom souhaitez-vous pour votre ${type}?`,
            validate: input => input ? true : 'Le nom ne peut pas √™tre vide'
          }
        ]);
        options.name = answers.name;
      }

      console.log(chalk.yellow(`\nüß† Jarvis r√©fl√©chit √† la g√©n√©ration de ${options.name}...\n`));
      
      // Initialisation des syst√®mes
      const groqClient = new GroqClient();
      const memory = new MemorySystem();
      
      // R√©cup√©ration du contexte du projet
      const projectContext = await analyzeProjectContext();
      
      // G√©n√©ration en fonction du type
      switch (type) {
        case 'component':
        case 'c':
          await generateComponent(options, groqClient, memory, projectContext);
          break;
        case 'page':
        case 'p':
          await generatePage(options, groqClient, memory, projectContext);
          break;
        case 'hook':
        case 'h':
          await generateHook(options, groqClient, memory, projectContext);
          break;
        case 'context':
          await generateContext(options, groqClient, memory, projectContext);
          break;
        default:
          console.log(chalk.red(`Type "${type}" non support√©.`));
          console.log('Types support√©s: component, page, hook, context');
          process.exit(1);
      }
      
      console.log(chalk.green('\n‚úÖ G√©n√©ration termin√©e avec succ√®s!'));
      
    } catch (error) {
      console.error(chalk.red('\n‚ùå Erreur lors de la g√©n√©ration:'), error.message);
      process.exit(1);
    }
  });

// Commande: initialiser un nouveau projet
program
  .command('init [projectName]')
  .description('Initialiser un nouveau projet React/Next.js avec Jarvis')
  .action(async (projectName) => {
    displayBanner();
    
    if (!projectName) {
      const answers = await inquirer.prompt([
        {
          type: 'input',
          name: 'projectName',
          message: 'Quel nom souhaitez-vous pour votre projet?',
          default: 'my-jarvis-app'
        }
      ]);
      projectName = answers.projectName;
    }
    
    console.log(chalk.yellow(`\nüöÄ Initialisation du projet ${projectName}...`));
    await initializeProject(projectName);
  });

// Commande: dashboard
program
  .command('dashboard')
  .alias('dash')
  .description('Lancer le dashboard de monitoring Jarvis')
  .action(() => {
    displayBanner();
    console.log(chalk.yellow('üìä Lancement du dashboard Jarvis...'));
    launchDashboard();
  });

// Commande: apprendre (mode p√©dagogique)
program
  .command('learn')
  .alias('l')
  .description('Mode apprentissage - Poser une question √† Jarvis')
  .action(async () => {
    displayBanner();
    
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'question',
        message: 'Quelle question technique souhaitez-vous poser √† Jarvis?',
        validate: input => input ? true : 'La question ne peut pas √™tre vide'
      }
    ]);
    
    await teachMode(answers.question);
  });

// Affichage de l'aide par d√©faut
program.on('--help', () => {
  console.log('\nExemples:');
  console.log('  $ jarvis generate component -n Button');
  console.log('  $ jarvis generate page -n Home --no-storybook');
  console.log('  $ jarvis init my-app');
  console.log('  $ jarvis learn');
});

// Fonction pour v√©rifier les pr√©requis
async function checkPrerequisites() {
  // V√©rifier que Node.js est install√©
  // V√©rifier les d√©pendances n√©cessaires
  // V√©rifier la cl√© API Groq
  console.log(chalk.blue('üîç V√©rification des pr√©requis...'));
  
  // Simulation de v√©rification
  return true;
}

// Fonction pour analyser le contexte du projet
async function analyzeProjectContext() {
  console.log(chalk.blue('üìã Analyse du projet en cours...'));
  
  // D√©tection du framework (React, Next.js, etc.)
  // D√©tection de TypeScript
  // D√©tection des d√©pendances existantes
  // Analyse de la structure du projet
  
  return {
    framework: 'nextjs',
    typescript: false,
    hasStorybook: false,
    hasTesting: false,
    designSystem: 'tailwind'
  };
}

// Fonction pour g√©n√©rer un composant
async function generateComponent(options, groqClient, memory, projectContext) {
  console.log(chalk.blue(`‚öõÔ∏è  G√©n√©ration du composant ${options.name}...`));
  
  // G√©n√©ration du composant principal
  const reactGenerator = new ReactGenerator(groqClient, memory);
  const componentCode = await reactGenerator.generateComponent(
    options.name, 
    options.dir, 
    projectContext
  );
  
  // G√©n√©ration de la story Storybook si demand√©
  if (options.storybook) {
    const storybookGenerator = new StorybookGenerator(groqClient, memory);
    await storybookGenerator.generateStory(
      options.name, 
      componentCode, 
      projectContext
    );
  }
  
  // G√©n√©ration des tests si demand√©
  if (options.tests) {
    const testGenerator = new TestGenerator(groqClient, memory);
    await testGenerator.generateTests(
      options.name, 
      componentCode, 
      projectContext
    );
  }
  
  // Ajout √† la m√©moire des g√©n√©rations
  await memory.recordGeneration({
    type: 'component',
    name: options.name,
    path: options.dir,
    timestamp: new Date(),
    context: projectContext
  });
}

// Fonction pour g√©n√©rer une page
async function generatePage(options, groqClient, memory, projectContext) {
  console.log(chalk.blue(`üìÑ G√©n√©ration de la page ${options.name}...`));
  // Impl√©mentation similaire √† generateComponent mais adapt√©e aux pages
}

// Fonction pour g√©n√©rer un hook personnalis√©
async function generateHook(options, groqClient, memory, projectContext) {
  console.log(chalk.blue(`üé£ G√©n√©ration du hook ${options.name}...`));
  // Impl√©mentation sp√©cifique aux hooks
}

// Fonction pour g√©n√©rer un contexte
async function generateContext(options, groqClient, memory, projectContext) {
  console.log(chalk.blue(`üîÑ G√©n√©ration du contexte ${options.name}...`));
  // Impl√©mentation sp√©cifique aux contextes React
}

// Fonction pour initialiser un nouveau projet
async function initializeProject(projectName) {
  console.log(chalk.blue(`üèóÔ∏è  Cr√©ation du projet ${projectName}...`));
  
  // Cr√©ation du r√©pertoire du projet
  const projectPath = path.join(process.cwd(), projectName);
  if (fs.existsSync(projectPath)) {
    console.log(chalk.red(`Le projet ${projectName} existe d√©j√†.`));
    process.exit(1);
  }
  
  fs.mkdirSync(projectPath);
  
  // Questions pour configurer le projet
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'framework',
      message: 'Quel framework souhaitez-vous utiliser?',
      choices: ['Next.js', 'React', 'Vite'],
      default: 'Next.js'
    },
    {
      type: 'confirm',
      name: 'typescript',
      message: 'Utiliser TypeScript?',
      default: true
    },
    {
      type: 'confirm',
      name: 'storybook',
      message: 'Installer Storybook?',
      default: true
    },
    {
      type: 'confirm',
      name: 'testing',
      message: 'Configurer les tests (Jest + Testing Library)?',
      default: true
    },
    {
      type: 'list',
      name: 'styling',
      message: 'Quelle solution de styling souhaitez-vous?',
      choices: ['Tailwind CSS', 'Styled Components', 'CSS Modules', 'Emotion'],
      default: 'Tailwind CSS'
    }
  ]);
  
  // Logique d'initialisation du projet en fonction des r√©ponses
  console.log(chalk.yellow('\nüì¶ Installation des d√©pendances...'));
  
  // Cette partie serait normalement impl√©ment√©e avec des appels syst√®me
  // pour ex√©cuter les commandes d'initialisation appropri√©es
  
  console.log(chalk.green(`\n‚úÖ Projet ${projectName} initialis√© avec succ√®s!`));
  console.log(chalk.blue('\nProchaines √©tapes:'));
  console.log(`  cd ${projectName}`);
  console.log('  jarvis generate component -n Welcome');
}

// Fonction pour lancer le dashboard
function launchDashboard() {
  // Impl√©mentation pour lancer l'interface web de monitoring
  console.log(chalk.yellow('Le dashboard sera accessible √† http://localhost:3000'));
  // Ici, on lancerait normalement le serveur du dashboard
}

// Fonction pour le mode apprentissage
async function teachMode(question) {
  console.log(chalk.blue(`üéì Mode apprentissage: "${question}"`));
  
  // Utilisation de Groq pour obtenir une r√©ponse p√©dagogique
  const groqClient = new GroqClient();
  const response = await groqClient.askQuestion(question, true);
  
  console.log(chalk.green('\nü§ñ R√©ponse de Jarvis:'));
  console.log(chalk.white(response));
  
  // Proposition de sujets connexes √† apprendre
  console.log(chalk.blue('\nüìö Sujets connexes √† explorer:'));
  console.log('- Comprendre les hooks React');
  console.log('- Best practices pour les composants');
  console.log('- Tests unitaires avec Jest');
}

// Gestion des commandes non reconnues
program.on('command:*', () => {
  console.error(chalk.red('Commande non reconnue: %s'), program.args.join(' '));
  console.log('Utilisez --help pour voir la liste des commandes disponibles.');
  process.exit(1);
});

// Parse les arguments de la ligne de commande
if (process.argv.length <= 2) {
  displayBanner();
  program.help();
} else {
  program.parse(process.argv);
}