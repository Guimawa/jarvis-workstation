#!/usr/bin/env node
/**
 * üß™ SCRIPT DE TEST - ANALYSE MICROSCOPIQUE 2025
 * Test des fonctionnalit√©s principales
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import AnalyseMicroscopique from './analyse-microscopique-2025.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class TestAnalyseMicroscopique {
    constructor() {
        this.testsReussis = 0;
        this.testsEchoues = 0;
        this.tests = [];
    }

    async demarrerTests() {
        console.log('üß™ D√âMARRAGE DES TESTS - ANALYSE MICROSCOPIQUE 2025');
        console.log('=' .repeat(60));
        
        try {
            // Test 1: Initialisation
            await this.testerInitialisation();
            
            // Test 2: D√©tection des doutes
            await this.testerDetectionDoutes();
            
            // Test 3: Calcul de hash
            await this.testerCalculHash();
            
            // Test 4: Analyse de fichier
            await this.testerAnalyseFichier();
            
            // Test 5: Gestion des erreurs
            await this.testerGestionErreurs();
            
            // Rapport final
            this.afficherRapportTests();
            
        } catch (error) {
            console.error('‚ùå ERREUR CRITIQUE DANS LES TESTS:', error.message);
        }
    }

    async testerInitialisation() {
        console.log('\nüîß Test 1: Initialisation...');
        
        try {
            const analyseur = new AnalyseMicroscopique();
            
            // V√©rifier les propri√©t√©s
            this.verifier(analyseur.doutes !== undefined, 'Propri√©t√© doutes initialis√©e');
            this.verifier(analyseur.stats.doutes === 0, 'Compteur doutes √† z√©ro');
            this.verifier(analyseur.masterFiles instanceof Map, 'Map ma√Ætres initialis√©e');
            
            console.log('  ‚úÖ Initialisation r√©ussie');
            this.testsReussis++;
            
        } catch (error) {
            console.log(`  ‚ùå √âchec: ${error.message}`);
            this.testsEchoues++;
        }
    }

    async testerDetectionDoutes() {
        console.log('\nüîç Test 2: D√©tection des doutes...');
        
        try {
            const analyseur = new AnalyseMicroscopique();
            
            // Test cas d'utilit√© ambigu√´
            const analyseAmbigue = {
                chemin: '/test/ambigue.js',
                nom: 'ambigue.js',
                utilite: 6,
                qualite: 5,
                comparaison: { statut: 'UNIQUE', differences: [] },
                dependances: [],
                complexite: 3,
                lignes: 100
            };
            
            analyseur.detecterDoutes(analyseAmbigue);
            
            this.verifier(analyseur.doutes.length > 0, 'Doute d√©tect√© pour utilit√© ambigu√´');
            this.verifier(analyseur.stats.doutes === 1, 'Compteur doutes incr√©ment√©');
            
            // Test cas de d√©pendances excessives
            const analyseDependances = {
                chemin: '/test/dependances.js',
                nom: 'dependances.js',
                utilite: 8,
                qualite: 7,
                comparaison: { statut: 'UNIQUE', differences: [] },
                dependances: new Array(25).fill('module'),
                complexite: 5,
                lignes: 200
            };
            
            analyseur.detecterDoutes(analyseDependances);
            
            this.verifier(analyseur.doutes.length === 2, 'Deux doutes d√©tect√©s');
            
            console.log('  ‚úÖ D√©tection des doutes r√©ussie');
            this.testsReussis++;
            
        } catch (error) {
            console.log(`  ‚ùå √âchec: ${error.message}`);
            this.testsEchoues++;
        }
    }

    async testerCalculHash() {
        console.log('\nüîê Test 3: Calcul de hash...');
        
        try {
            const analyseur = new AnalyseMicroscopique();
            
            // Cr√©er un fichier de test
            const testFile = path.join(__dirname, 'test-hash.txt');
            const contenu = 'Test de calcul de hash pour analyse microscopique 2025';
            fs.writeFileSync(testFile, contenu, 'utf8');
            
            // Calculer le hash
            const hash1 = await analyseur.calculerHash(testFile);
            const hash2 = await analyseur.calculerHash(testFile);
            
            this.verifier(hash1 === hash2, 'Hash identique pour m√™me fichier');
            this.verifier(hash1.length === 64, 'Hash SHA256 de 64 caract√®res');
            
            // Nettoyer
            fs.unlinkSync(testFile);
            
            console.log('  ‚úÖ Calcul de hash r√©ussi');
            this.testsReussis++;
            
        } catch (error) {
            console.log(`  ‚ùå √âchec: ${error.message}`);
            this.testsEchoues++;
        }
    }

    async testerAnalyseFichier() {
        console.log('\nüî¨ Test 4: Analyse de fichier...');
        
        try {
            const analyseur = new AnalyseMicroscopique();
            
            // Cr√©er un fichier de test
            const testFile = path.join(__dirname, 'test-analyse.js');
            const contenu = `
// Test d'analyse microscopique
function testFunction() {
    console.log('Hello World');
    return true;
}

const testVariable = 'test';
export { testFunction, testVariable };
`;
            fs.writeFileSync(testFile, contenu, 'utf8');
            
            // Analyser le fichier
            await analyseur.analyserFichier(testFile);
            
            this.verifier(analyseur.analysisResults.length === 1, 'Fichier analys√©');
            this.verifier(analyseur.analysisResults[0].nom === 'test-analyse.js', 'Nom de fichier correct');
            this.verifier(analyseur.analysisResults[0].fonctions.includes('testFunction'), 'Fonction d√©tect√©e');
            this.verifier(analyseur.analysisResults[0].type === 'JavaScript', 'Type de fichier correct');
            
            // Nettoyer
            fs.unlinkSync(testFile);
            
            console.log('  ‚úÖ Analyse de fichier r√©ussie');
            this.testsReussis++;
            
        } catch (error) {
            console.log(`  ‚ùå √âchec: ${error.message}`);
            this.testsEchoues++;
        }
    }

    async testerGestionErreurs() {
        console.log('\n‚ö†Ô∏è Test 5: Gestion des erreurs...');
        
        try {
            const analyseur = new AnalyseMicroscopique();
            
            // Tenter d'analyser un fichier inexistant
            const fichierInexistant = '/fichier/inexistant.js';
            
            // Capturer l'erreur
            let erreurCapturee = false;
            try {
                await analyseur.analyserFichier(fichierInexistant);
            } catch (error) {
                erreurCapturee = true;
            }
            
            this.verifier(erreurCapturee, 'Erreur captur√©e pour fichier inexistant');
            this.verifier(analyseur.stats.errors > 0, 'Compteur d\'erreurs incr√©ment√©');
            
            console.log('  ‚úÖ Gestion des erreurs r√©ussie');
            this.testsReussis++;
            
        } catch (error) {
            console.log(`  ‚ùå √âchec: ${error.message}`);
            this.testsEchoues++;
        }
    }

    verifier(condition, description) {
        if (condition) {
            console.log(`    ‚úì ${description}`);
            return true;
        } else {
            console.log(`    ‚úó ${description}`);
            return false;
        }
    }

    afficherRapportTests() {
        console.log('\nüìä RAPPORT DES TESTS');
        console.log('=' .repeat(40));
        console.log(`Tests r√©ussis : ${this.testsReussis}`);
        console.log(`Tests √©chou√©s : ${this.testsEchoues}`);
        console.log(`Total tests : ${this.testsReussis + this.testsEchoues}`);
        
        const pourcentage = ((this.testsReussis / (this.testsReussis + this.testsEchoues)) * 100).toFixed(1);
        console.log(`Taux de r√©ussite : ${pourcentage}%`);
        
        if (this.testsEchoues === 0) {
            console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
            console.log('‚úÖ Le syst√®me d\'analyse microscopique 2025 est pr√™t √† l\'emploi');
        } else {
            console.log('\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â');
            console.log('üîß V√©rifiez la configuration et relancez les tests');
        }
        
        console.log('=' .repeat(40));
    }
}

// üöÄ EX√âCUTION DES TESTS
if (import.meta.url === `file://${process.argv[1]}`) {
    const testeur = new TestAnalyseMicroscopique();
    testeur.demarrerTests().catch(console.error);
}

export default TestAnalyseMicroscopique;
