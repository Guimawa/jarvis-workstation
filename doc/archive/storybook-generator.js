// üìÇ generators/storybook-gen.js
// ==============================
// G√©n√©rateur de stories Storybook
// ==============================

const fs = require('fs');
const path = require('path');
const { formatCode } = require('../utils/formatters');

class StorybookGenerator {
  constructor(groqClient, memorySystem) {
    this.groqClient = groqClient;
    this.memory = memorySystem;
  }

  /**
   * G√©n√®re une story Storybook pour un composant
   * @param {string} componentName - Nom du composant
   * @param {string} componentCode - Code du composant
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code de la story g√©n√©r√©e
   */
  async generateStory(componentName, componentCode, projectContext) {
    try {
      console.log(`üìö G√©n√©ration de la story pour ${componentName}...`);
      
      // Prompt pour Groq bas√© sur le composant et le contexte
      const prompt = this.buildStoryPrompt(componentName, componentCode, projectContext);
      
      // Appel √† l'API Groq
      const storyCode = await this.groqClient.generateCode(prompt);
      
      // Formatage du code
      const formattedCode = await formatCode(storyCode, 'javascript');
      
      // D√©termination de l'extension
      const extension = projectContext.typescript ? 'ts' : 'js';
      
      // Cr√©ation du r√©pertoire stories si n√©cessaire
      const storiesDir = path.join(process.cwd(), 'src', 'stories');
      if (!fs.existsSync(storiesDir)) {
        fs.mkdirSync(storiesDir, { recursive: true });
      }
      
      // Chemin du fichier
      const filePath = path.join(storiesDir, `${componentName}.stories.${extension}`);
      
      // √âcriture du fichier
      fs.writeFileSync(filePath, formattedCode);
      
      console.log(`‚úÖ Story ${componentName} g√©n√©r√©e: ${filePath}`);
      
      // Enregistrement dans la m√©moire
      await this.memory.recordGeneration({
        type: 'story',
        name: componentName,
        path: filePath,
        context: projectContext,
        timestamp: new Date()
      });
      
      return formattedCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la story:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour la g√©n√©ration de story
   * @param {string} componentName - Nom du composant
   * @param {string} componentCode - Code du composant
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildStoryPrompt(componentName, componentCode, context) {
    const { typescript } = context;
    
    return `
G√©n√®re une story Storybook ${typescript ? 'TypeScript' : 'JavaScript'} pour le composant suivant:

${componentCode}

La story doit:
1. Couvrir tous les √©tats et variantes du composant
2. Inclure des contr√¥les (args) pour toutes les props modifiables
3. Suivre les meilleures pratiques Storybook
4. Inclure une documentation avec des descriptions pertinentes
5. Avoir des noms significatifs pour chaque story
6. Utiliser Template.bind({}) pour les stories bas√©es sur des args

G√©n√®re uniquement le code de la story, sans explications suppl√©mentaires.
`;
  }

  /**
   * G√©n√®re un fichier de configuration pour Storybook
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code de configuration g√©n√©r√©
   */
  async generateStorybookConfig(projectContext) {
    try {
      console.log('üìö G√©n√©ration de la configuration Storybook...');
      
      const prompt = this.buildConfigPrompt(projectContext);
      const configCode = await this.groqClient.generateCode(prompt);
      
      // Chemin du fichier de configuration principal
      const configPath = path.join(process.cwd(), '.storybook', 'main.js');
      
      // Cr√©ation du r√©pertoire .storybook si n√©cessaire
      const storybookDir = path.join(process.cwd(), '.storybook');
      if (!fs.existsSync(storybookDir)) {
        fs.mkdirSync(storybookDir, { recursive: true });
      }
      
      // √âcriture du fichier
      fs.writeFileSync(configPath, configCode);
      
      console.log(`‚úÖ Configuration Storybook g√©n√©r√©e: ${configPath}`);
      
      return configCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la configuration Storybook:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour la configuration Storybook
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildConfigPrompt(context) {
    const { framework, typescript, designSystem } = context;
    
    return `
G√©n√®re un fichier de configuration Storybook (main.js) pour un projet ${framework} 
${typescript ? 'TypeScript' : 'JavaScript'} utilisant ${designSystem}.

La configuration doit:
1. Inclure les addons essentiels (controls, actions, etc.)
2. Configurer le support TypeScript si n√©cessaire
3. Configurer le support de ${designSystem}
4. Inclure la gestion des assets statiques (images, CSS)
5. Configurer le webpack pour le projet ${framework}
6. Inclure des alias de chemin si communs dans ${framework}

G√©n√®re uniquement le code de configuration, sans explications suppl√©mentaires.
`;
  }
}

module.exports = StorybookGenerator;