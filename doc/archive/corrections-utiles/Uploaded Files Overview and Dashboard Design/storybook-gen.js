// ==============================================
// üìö STORYBOOK GENERATOR - G√©n√©rateur Storybook Ultra Instinct
// ==============================================
// Version: 2.0.0 Ultra Instinct
// Auteur: Jarvis Expert
// Description: G√©n√©rateur intelligent de stories Storybook
// avec controls, actions, docs et variantes automatiques
// ==============================================

import fs from 'fs/promises';
import path from 'path';
import Logger from '../utils/logger.js';
import { formatCode } from '../utils/formatters.js';

/**
 * G√©n√©rateur de stories Storybook avec IA
 */
export default class StorybookGenerator {
  constructor(groqClient, memorySystem) {
    this.groqClient = groqClient;
    this.memory = memorySystem;
    this.logger = new Logger('StorybookGenerator');
    
    // Configuration par d√©faut
    this.defaultConfig = {
      version: '7.0', // Version de Storybook
      addons: [
        '@storybook/addon-essentials',
        '@storybook/addon-controls',
        '@storybook/addon-actions',
        '@storybook/addon-docs',
        '@storybook/addon-a11y'
      ],
      generateVariants: true,
      generateDocs: true,
      generateControls: true,
      generateActions: true,
      includeAccessibility: true
    };
    
    // Templates de stories
    this.storyTemplates = {
      basic: 'basic-story.template',
      advanced: 'advanced-story.template',
      interactive: 'interactive-story.template'
    };
  }
  
  /**
   * G√©n√©ration principale d'une story Storybook
   */
  async generateStory(componentSpec, componentCode, options = {}) {
    try {
      const config = { ...this.defaultConfig, ...options };
      
      this.logger.info(`üìö G√©n√©ration de la story Storybook: ${componentSpec.name}`);
      
      // Analyse du composant pour extraire les props
      const componentAnalysis = await this.analyzeComponent(componentCode, componentSpec);
      
      // G√©n√©ration des variantes de story
      const variants = config.generateVariants 
        ? await this.generateStoryVariants(componentSpec, componentAnalysis)
        : ['Default'];
      
      // G√©n√©ration du code de la story
      const storyCode = await this.generateStoryCode(
        componentSpec, 
        componentAnalysis, 
        variants, 
        config
      );
      
      // Formatage du code
      const formattedCode = await formatCode(storyCode, 'javascript');
      
      // G√©n√©ration de la documentation
      const docs = config.generateDocs 
        ? await this.generateStoryDocs(componentSpec, componentAnalysis)
        : null;
      
      // Sauvegarde en m√©moire
      await this.saveToMemory(componentSpec, formattedCode, componentAnalysis);
      
      const result = {
        success: true,
        story: {
          name: componentSpec.name,
          code: formattedCode,
          variants,
          docs,
          analysis: componentAnalysis
        },
        metadata: {
          timestamp: Date.now(),
          config,
          addons: config.addons
        }
      };
      
      this.logger.info(`‚úÖ Story ${componentSpec.name} g√©n√©r√©e avec succ√®s`);
      
      return result;
      
    } catch (error) {
      this.logger.error(`‚ùå Erreur g√©n√©ration story ${componentSpec.name}:`, error);
      return {
        success: false,
        error: error.message,
        story: null
      };
    }
  }
  
  /**
   * G√©n√©ration de configuration Storybook
   */
  async generateStorybookConfig(projectPath, options = {}) {
    try {
      const config = { ...this.defaultConfig, ...options };
      
      this.logger.info('‚öôÔ∏è G√©n√©ration de la configuration Storybook...');
      
      // G√©n√©ration du fichier main.js
      const mainConfig = await this.generateMainConfig(config);
      
      // G√©n√©ration du fichier preview.js
      const previewConfig = await this.generatePreviewConfig(config);
      
      // G√©n√©ration du fichier manager.js (optionnel)
      const managerConfig = await this.generateManagerConfig(config);
      
      // √âcriture des fichiers de configuration
      const storybookDir = path.join(projectPath, '.storybook');
      await fs.mkdir(storybookDir, { recursive: true });
      
      await fs.writeFile(path.join(storybookDir, 'main.js'), mainConfig);
      await fs.writeFile(path.join(storybookDir, 'preview.js'), previewConfig);
      
      if (managerConfig) {
        await fs.writeFile(path.join(storybookDir, 'manager.js'), managerConfig);
      }
      
      this.logger.info('‚úÖ Configuration Storybook g√©n√©r√©e');
      
      return {
        success: true,
        configPath: storybookDir,
        files: ['main.js', 'preview.js', managerConfig ? 'manager.js' : null].filter(Boolean)
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erreur g√©n√©ration config Storybook:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Analyse du composant pour extraire les informations
   */
  async analyzeComponent(componentCode, componentSpec) {
    const prompt = `
Analyse ce composant React pour g√©n√©rer une story Storybook optimale:

Code du composant:
${componentCode}

Sp√©cification:
${JSON.stringify(componentSpec, null, 2)}

Extrais et analyse:
1. Props du composant avec leurs types et valeurs par d√©faut
2. √âv√©nements/callbacks disponibles
3. √âtats internes observables
4. Variantes visuelles possibles
5. Cas d'usage typiques
6. Consid√©rations d'accessibilit√©
7. D√©pendances externes
8. Exemples de donn√©es de test

Retourne un JSON structur√© avec ces informations.
`;
    
    const response = await this.groqClient.analyzeContext({ prompt });
    return response;
  }
  
  /**
   * G√©n√©ration des variantes de story
   */
  async generateStoryVariants(componentSpec, analysis) {
    const prompt = `
G√©n√®re des variantes de story Storybook pour ce composant:

Composant: ${componentSpec.name}
Analyse: ${JSON.stringify(analysis, null, 2)}

G√©n√®re des variantes qui montrent:
1. √âtat par d√©faut
2. √âtats avec diff√©rentes props
3. √âtats d'interaction (hover, focus, active)
4. √âtats d'erreur ou de chargement
5. Variantes de taille/responsive
6. Variantes de th√®me (si applicable)
7. Cas limites

Retourne un tableau de noms de variantes descriptifs.
`;
    
    const response = await this.groqClient.generateCode({
      type: 'story-variants',
      name: `${componentSpec.name}Variants`,
      prompt
    });
    
    try {
      return JSON.parse(response.code);
    } catch {
      return ['Default', 'WithProps', 'Interactive', 'Loading', 'Error'];
    }
  }
  
  /**
   * G√©n√©ration du code de la story
   */
  async generateStoryCode(componentSpec, analysis, variants, config) {
    const prompt = `
G√©n√®re une story Storybook compl√®te pour ce composant React:

Composant: ${componentSpec.name}
Analyse: ${JSON.stringify(analysis, null, 2)}
Variantes: ${JSON.stringify(variants)}

Configuration Storybook:
- Version: ${config.version}
- Controls: ${config.generateControls}
- Actions: ${config.generateActions}
- Docs: ${config.generateDocs}
- A11y: ${config.includeAccessibility}

La story doit inclure:
1. Import du composant
2. Export par d√©faut avec metadata
3. Template de base r√©utilisable
4. Toutes les variantes demand√©es
5. Controls configur√©s pour les props
6. Actions pour les √©v√©nements
7. Documentation inline si demand√©e
8. Param√®tres d'accessibilit√©
9. Decorators si n√©cessaires

Utilise la syntaxe Storybook ${config.version} (Component Story Format 3.0).

Retourne uniquement le code de la story.
`;
    
    const response = await this.groqClient.generateCode({
      type: 'storybook-story',
      name: `${componentSpec.name}.stories.js`,
      prompt
    }, {
      temperature: 0.6,
      maxTokens: 2048
    });
    
    return response.code;
  }
  
  /**
   * G√©n√©ration de la documentation de story
   */
  async generateStoryDocs(componentSpec, analysis) {
    const prompt = `
G√©n√®re une documentation MDX pour la story Storybook:

Composant: ${componentSpec.name}
Analyse: ${JSON.stringify(analysis, null, 2)}

La documentation doit inclure:
1. Description du composant
2. Cas d'usage principaux
3. Guide des props avec exemples
4. Exemples d'int√©gration
5. Bonnes pratiques
6. Consid√©rations d'accessibilit√©
7. Notes de design

Format: MDX (Markdown + JSX)

Retourne uniquement le contenu MDX.
`;
    
    const response = await this.groqClient.generateCode({
      type: 'storybook-docs',
      name: `${componentSpec.name}.stories.mdx`,
      prompt
    });
    
    return response.code;
  }
  
  /**
   * G√©n√©ration du fichier main.js
   */
  async generateMainConfig(config) {
    const mainConfig = `
module.exports = {
  stories: [
    '../src/**/*.stories.@(js|jsx|ts|tsx|mdx)'
  ],
  
  addons: [
    ${config.addons.map(addon => `'${addon}'`).join(',\n    ')}
  ],
  
  framework: {
    name: '@storybook/react-vite',
    options: {}
  },
  
  features: {
    storyStoreV7: true,
    buildStoriesJson: true
  },
  
  docs: {
    autodocs: ${config.generateDocs ? 'true' : 'false'}
  },
  
  typescript: {
    check: false,
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),
    },
  },
  
  viteFinal: async (config) => {
    // Personnalisations Vite si n√©cessaires
    return config;
  }
};
`;
    
    return await formatCode(mainConfig, 'javascript');
  }
  
  /**
   * G√©n√©ration du fichier preview.js
   */
  async generatePreviewConfig(config) {
    const previewConfig = `
import { configure } from '@storybook/react';

// Configuration globale des param√®tres
export const parameters = {
  actions: { 
    argTypesRegex: '^on[A-Z].*' 
  },
  
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/,
    },
    expanded: true,
    sort: 'requiredFirst'
  },
  
  docs: {
    extractComponentDescription: (component, { notes }) => {
      if (notes) {
        return typeof notes === 'string' ? notes : notes.markdown || notes.text;
      }
      return null;
    },
  },
  
  ${config.includeAccessibility ? `
  a11y: {
    element: '#root',
    config: {},
    options: {},
    manual: true,
  },
  ` : ''}
  
  backgrounds: {
    default: 'light',
    values: [
      {
        name: 'light',
        value: '#ffffff',
      },
      {
        name: 'dark',
        value: '#333333',
      },
      {
        name: 'gray',
        value: '#f5f5f5',
      },
    ],
  },
  
  viewport: {
    viewports: {
      mobile: {
        name: 'Mobile',
        styles: {
          width: '375px',
          height: '667px',
        },
      },
      tablet: {
        name: 'Tablet',
        styles: {
          width: '768px',
          height: '1024px',
        },
      },
      desktop: {
        name: 'Desktop',
        styles: {
          width: '1200px',
          height: '800px',
        },
      },
    },
  },
};

// Decorators globaux
export const decorators = [
  (Story) => (
    <div style={{ padding: '1rem' }}>
      <Story />
    </div>
  ),
];

// Configuration des types d'arguments globaux
export const argTypes = {
  // Configuration globale des controls
};
`;
    
    return await formatCode(previewConfig, 'javascript');
  }
  
  /**
   * G√©n√©ration du fichier manager.js (optionnel)
   */
  async generateManagerConfig(config) {
    if (!config.customManager) return null;
    
    const managerConfig = `
import { addons } from '@storybook/addons';
import { themes } from '@storybook/theming';

addons.setConfig({
  theme: themes.light,
  panelPosition: 'bottom',
  selectedPanel: 'controls',
  showNav: true,
  showPanel: true,
  showToolbar: true,
});
`;
    
    return await formatCode(managerConfig, 'javascript');
  }
  
  /**
   * G√©n√©ration de stories pour plusieurs composants
   */
  async generateMultipleStories(components, options = {}) {
    const results = [];
    
    for (const component of components) {
      try {
        const result = await this.generateStory(
          component.spec,
          component.code,
          options
        );
        results.push(result);
      } catch (error) {
        this.logger.error(`‚ùå Erreur g√©n√©ration story ${component.spec.name}:`, error);
        results.push({
          success: false,
          error: error.message,
          component: component.spec.name
        });
      }
    }
    
    return results;
  }
  
  /**
   * G√©n√©ration d'une story interactive avec contr√¥les avanc√©s
   */
  async generateInteractiveStory(componentSpec, componentCode, interactions, options = {}) {
    const prompt = `
G√©n√®re une story Storybook interactive avec des contr√¥les avanc√©s:

Composant: ${componentSpec.name}
Code: ${componentCode}
Interactions: ${JSON.stringify(interactions, null, 2)}

La story doit inclure:
1. Contr√¥les interactifs pour toutes les props
2. Actions pour tous les √©v√©nements
3. Simulation d'interactions utilisateur
4. Tests d'accessibilit√© int√©gr√©s
5. Variantes d'√©tat dynamiques
6. Playground interactif

Utilise @storybook/addon-interactions pour les tests d'interaction.

Retourne uniquement le code de la story interactive.
`;
    
    const response = await this.groqClient.generateCode({
      type: 'interactive-story',
      name: `${componentSpec.name}.interactive.stories.js`,
      prompt
    });
    
    return response.code;
  }
  
  /**
   * Sauvegarde en m√©moire
   */
  async saveToMemory(componentSpec, storyCode, analysis) {
    if (!this.memory.isInitialized) {
      return;
    }
    
    await this.memory.recordGeneration({
      type: 'storybook-story',
      name: componentSpec.name,
      code: storyCode,
      analysis,
      domain: 'storybook',
      timestamp: Date.now(),
      success: true,
      quality: 0.9 // Les stories sont g√©n√©ralement de bonne qualit√©
    });
  }
  
  /**
   * √âcriture des fichiers de story
   */
  async writeStoryFiles(storyResult, outputDir) {
    try {
      // Cr√©ation du r√©pertoire des stories
      const storiesDir = path.join(outputDir, 'stories');
      await fs.mkdir(storiesDir, { recursive: true });
      
      // √âcriture du fichier de story principal
      const storyFile = `${storyResult.story.name}.stories.js`;
      await fs.writeFile(
        path.join(storiesDir, storyFile),
        storyResult.story.code
      );
      
      // √âcriture de la documentation si pr√©sente
      if (storyResult.story.docs) {
        const docsFile = `${storyResult.story.name}.stories.mdx`;
        await fs.writeFile(
          path.join(storiesDir, docsFile),
          storyResult.story.docs
        );
      }
      
      this.logger.info(`üìÅ Stories √©crites dans: ${storiesDir}`);
      
      return {
        success: true,
        path: storiesDir,
        files: [storyFile, storyResult.story.docs ? `${storyResult.story.name}.stories.mdx` : null].filter(Boolean)
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erreur √©criture stories:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Validation d'une story Storybook
   */
  async validateStory(storyCode) {
    // V√©rifications basiques de la structure Storybook
    const checks = [
      {
        test: /export default.*{/,
        message: 'Export par d√©faut avec metadata pr√©sent'
      },
      {
        test: /export const \w+/,
        message: 'Au moins une story export√©e'
      },
      {
        test: /args:|argTypes:/,
        message: 'Configuration des arguments pr√©sente'
      }
    ];
    
    const issues = [];
    
    for (const check of checks) {
      if (!check.test.test(storyCode)) {
        issues.push({
          type: 'warning',
          message: `Manquant: ${check.message}`
        });
      }
    }
    
    return {
      isValid: issues.length === 0,
      issues,
      score: Math.max(0, 100 - (issues.length * 20))
    };
  }
  
  /**
   * Obtention des statistiques du g√©n√©rateur
   */
  async getStats() {
    if (!this.memory.isInitialized) {
      return { stories: 0, components: 0 };
    }
    
    const storybookGenerations = await this.memory.search('', { 
      type: 'generation', 
      tags: ['storybook'] 
    });
    
    return {
      totalStories: storybookGenerations.length,
      componentsWithStories: new Set(storybookGenerations.map(g => g.data.name)).size,
      averageQuality: storybookGenerations.reduce((sum, g) => sum + (g.data.quality || 0), 0) / storybookGenerations.length || 0
    };
  }
}

