// Test du g√©n√©rateur React avec Abacus LLM
import ReactGeneratorAbacus from './src/generators/react-gen-abacus.js';

async function testReactGeneratorAbacus() {
  console.log('‚öõÔ∏è Test du g√©n√©rateur React avec Abacus LLM...\n');
  
  try {
    // Initialisation du g√©n√©rateur
    const generator = new ReactGeneratorAbacus({
      abacusApiKey: process.env.ABACUS_API_KEY || 'your-api-key-here',
      enableValidation: true
    });
    
    await generator.initialize();
    console.log('‚úÖ G√©n√©rateur React Abacus initialis√©');
    
    // Test 1: G√©n√©ration d'un composant simple
    console.log('\nüìù Test 1: Composant Button simple');
    const buttonSpec = {
      name: 'Button',
      type: 'fonctionnel',
      description: 'un bouton r√©utilisable avec diff√©rentes variantes',
      props: [
        { name: 'children', type: 'ReactNode', required: true, description: 'Contenu du bouton' },
        { name: 'variant', type: 'string', required: false, description: 'Variante du bouton (primary, secondary, danger)' },
        { name: 'size', type: 'string', required: false, description: 'Taille du bouton (sm, md, lg)' },
        { name: 'onClick', type: 'function', required: false, description: 'Fonction de clic' }
      ],
      features: ['Variantes de style', 'Tailles diff√©rentes', 'Gestion des √©v√©nements'],
      styling: 'Tailwind CSS',
      accessibility: true,
      performance: true
    };
    
    const buttonResult = await generator.generateComponent(buttonSpec, {
      typescript: true,
      storybook: true,
      tests: true,
      documentation: true
    });
    
    if (buttonResult.success) {
      console.log('‚úÖ Composant Button g√©n√©r√© avec succ√®s');
      console.log(`   Qualit√©: ${(buttonResult.metadata.quality * 100).toFixed(1)}%`);
      console.log(`   Tokens: ${buttonResult.metadata.tokens}`);
      console.log('\nüìÑ Code g√©n√©r√©:');
      console.log(buttonResult.component);
      
      if (buttonResult.documentation) {
        console.log('\nüìö Documentation:');
        console.log(buttonResult.documentation.content);
      }
      
      if (buttonResult.tests) {
        console.log('\nüß™ Tests:');
        console.log(buttonResult.tests.content);
      }
      
      if (buttonResult.storybook) {
        console.log('\nüìñ Storybook:');
        console.log(buttonResult.storybook.content);
      }
    } else {
      console.log('‚ùå √âchec de la g√©n√©ration du composant Button');
      console.log(`   Erreur: ${buttonResult.error.message}`);
    }
    
    // Test 2: G√©n√©ration d'une page compl√®te
    console.log('\nüìù Test 2: Page Dashboard');
    const dashboardSpec = {
      name: 'DashboardPage',
      description: 'une page de dashboard avec statistiques et graphiques',
      layout: 'Sidebar + Main content',
      sections: [
        'Header avec navigation',
        'Sidebar avec menu',
        'Section statistiques',
        'Graphiques de donn√©es',
        'Tableau des activit√©s r√©centes'
      ]
    };
    
    const dashboardResult = await generator.generatePage(dashboardSpec, {
      typescript: true,
      documentation: true
    });
    
    if (dashboardResult.success) {
      console.log('‚úÖ Page Dashboard g√©n√©r√©e avec succ√®s');
      console.log(`   Qualit√©: ${(dashboardResult.metadata.quality * 100).toFixed(1)}%`);
      console.log(`   Tokens: ${dashboardResult.metadata.tokens}`);
      console.log('\nüìÑ Code de la page:');
      console.log(dashboardResult.page.substring(0, 500) + '...');
    } else {
      console.log('‚ùå √âchec de la g√©n√©ration de la page Dashboard');
      console.log(`   Erreur: ${dashboardResult.error.message}`);
    }
    
    // Test 3: G√©n√©ration d'un hook personnalis√©
    console.log('\nüìù Test 3: Hook useApi');
    const hookSpec = {
      name: 'useApi',
      description: 'g√®re les appels API avec loading, erreur et donn√©es',
      parameters: [
        { name: 'url', type: 'string', required: true, description: 'URL de l\'API' },
        { name: 'options', type: 'object', required: false, description: 'Options de la requ√™te' }
      ],
      returnValue: '{ data, loading, error, refetch }'
    };
    
    const hookResult = await generator.generateHook(hookSpec, {
      typescript: true,
      tests: true,
      documentation: true
    });
    
    if (hookResult.success) {
      console.log('‚úÖ Hook useApi g√©n√©r√© avec succ√®s');
      console.log(`   Qualit√©: ${(hookResult.metadata.quality * 100).toFixed(1)}%`);
      console.log(`   Tokens: ${hookResult.metadata.tokens}`);
      console.log('\nüìÑ Code du hook:');
      console.log(hookResult.hook);
      
      if (hookResult.tests) {
        console.log('\nüß™ Tests du hook:');
        console.log(hookResult.tests.content);
      }
    } else {
      console.log('‚ùå √âchec de la g√©n√©ration du hook useApi');
      console.log(`   Erreur: ${hookResult.error.message}`);
    }
    
    // Test 4: M√©triques du g√©n√©rateur
    console.log('\nüìä M√©triques du g√©n√©rateur:');
    const metrics = generator.getMetrics();
    if (metrics) {
      console.log(`   Requ√™tes totales: ${metrics.totalRequests}`);
      console.log(`   Requ√™tes r√©ussies: ${metrics.successfulRequests}`);
      console.log(`   Taux de succ√®s: ${(metrics.successRate * 100).toFixed(1)}%`);
      console.log(`   Temps moyen: ${metrics.averageResponseTime.toFixed(0)}ms`);
      console.log(`   Qualit√© moyenne: ${(metrics.averageQuality * 100).toFixed(1)}%`);
      console.log(`   Taux de cache: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);
    }
    
    console.log('\nüéâ Tous les tests du g√©n√©rateur React Abacus sont pass√©s avec succ√®s !');
    
    // Fermeture du g√©n√©rateur
    await generator.close();
    console.log('‚úÖ G√©n√©rateur ferm√© proprement');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test du g√©n√©rateur React Abacus:', error);
    
    if (error.message.includes('Cl√© API Abacus manquante')) {
      console.log('\nüí° Pour tester avec une vraie cl√© API:');
      console.log('   1. Obtenez votre cl√© API sur https://abacus.ai');
      console.log('   2. D√©finissez la variable d\'environnement:');
      console.log('      export ABACUS_API_KEY="votre-cl√©-api"');
      console.log('   3. Relancez le test');
    }
  }
}

testReactGeneratorAbacus();
