// üìÇ generators/test-gen.js
// ==========================
// G√©n√©rateur de tests unitaires
// ==========================

const fs = require('fs');
const path = require('path');
const { formatCode } = require('../utils/formatters');

class TestGenerator {
  constructor(groqClient, memorySystem) {
    this.groqClient = groqClient;
    this.memory = memorySystem;
  }

  /**
   * G√©n√®re des tests unitaires pour un composant
   * @param {string} componentName - Nom du composant
   * @param {string} componentCode - Code du composant
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code des tests g√©n√©r√©s
   */
  async generateTests(componentName, componentCode, projectContext) {
    try {
      console.log(`üß™ G√©n√©ration des tests pour ${componentName}...`);
      
      // Prompt pour Groq bas√© sur le composant et le contexte
      const prompt = this.buildTestPrompt(componentName, componentCode, projectContext);
      
      // Appel √† l'API Groq
      const testCode = await this.groqClient.generateCode(prompt);
      
      // Formatage du code
      const formattedCode = await formatCode(testCode, 'javascript');
      
      // D√©termination de l'extension
      const extension = projectContext.typescript ? 'test.tsx' : 'test.jsx';
      
      // Cr√©ation du r√©pertoire __tests__ si n√©cessaire
      const testsDir = path.join(process.cwd(), 'src', '__tests__');
      if (!fs.existsSync(testsDir)) {
        fs.mkdirSync(testsDir, { recursive: true });
      }
      
      // Chemin du fichier
      const filePath = path.join(testsDir, `${componentName}.${extension}`);
      
      // √âcriture du fichier
      fs.writeFileSync(filePath, formattedCode);
      
      console.log(`‚úÖ Tests ${componentName} g√©n√©r√©s: ${filePath}`);
      
      // Enregistrement dans la m√©moire
      await this.memory.recordGeneration({
        type: 'test',
        name: componentName,
        path: filePath,
        context: projectContext,
        timestamp: new Date()
      });
      
      return formattedCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration des tests:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour la g√©n√©ration de tests
   * @param {string} componentName - Nom du composant
   * @param {string} componentCode - Code du composant
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildTestPrompt(componentName, componentCode, context) {
    const { typescript, testingFramework } = context;
    const framework = testingFramework || 'Jest avec Testing Library';
    
    return `
G√©n√®re des tests unitaires ${typescript ? 'TypeScript' : 'JavaScript'} avec ${framework} 
pour le composant suivant:

${componentCode}

Les tests doivent:
1. Couvrir les cas d'usage principaux du composant
2. Tester les interactions utilisateur (clics, saisie, etc.)
3. V√©rifier le rendu correct des props
4. Tester les √©tats du composant (loading, error, etc.)
5. Inclure des tests d'accessibilit√© de base
6. Utiliser les meilleures pratiques de testing
7. √ätre isol√©s et ind√©pendants
8. Inclure des snapshots si appropri√©

G√©n√®re uniquement le code des tests, sans explications suppl√©mentaires.
`;
  }

  /**
   * G√©n√®re un fichier de configuration pour les tests
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code de configuration g√©n√©r√©
   */
  async generateTestConfig(projectContext) {
    try {
      console.log('üß™ G√©n√©ration de la configuration de tests...');
      
      const prompt = this.buildTestConfigPrompt(projectContext);
      const configCode = await this.groqClient.generateCode(prompt);
      
      // D√©termination du nom du fichier de configuration
      const configFileName = projectContext.typescript ? 'jest.config.ts' : 'jest.config.js';
      const configPath = path.join(process.cwd(), configFileName);
      
      // √âcriture du fichier
      fs.writeFileSync(configPath, configCode);
      
      console.log(`‚úÖ Configuration des tests g√©n√©r√©e: ${configPath}`);
      
      return configCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la configuration des tests:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour la configuration des tests
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildTestConfigPrompt(context) {
    const { framework, typescript } = context;
    
    return `
G√©n√®re un fichier de configuration Jest pour un projet ${framework} 
${typescript ? 'TypeScript' : 'JavaScript'}.

La configuration doit:
1. Configurer le support TypeScript si n√©cessaire
2. Inclure les mappings de module pour ${framework}
3. Configurer la couverture de code (coverage)
4. Configurer les transformations n√©cessaires
5. Inclure les setupFiles pour Testing Library
6. Configurer les extensions de fichier √† traiter
7. Exclure les dossiers non n√©cessaires (node_modules, etc.)

G√©n√®re uniquement le code de configuration, sans explications suppl√©mentaires.
`;
  }

  /**
   * G√©n√®re un setup file pour les tests
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code du setup file g√©n√©r√©
   */
  async generateTestSetup(projectContext) {
    try {
      console.log('üß™ G√©n√©ration du fichier de setup des tests...');
      
      const prompt = this.buildTestSetupPrompt(projectContext);
      const setupCode = await this.groqClient.generateCode(prompt);
      
      // Chemin du fichier de setup
      const setupPath = path.join(process.cwd(), 'src', 'setupTests.js');
      
      // √âcriture du fichier
      fs.writeFileSync(setupPath, setupCode);
      
      console.log(`‚úÖ Setup des tests g√©n√©r√©: ${setupPath}`);
      
      return setupCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du setup des tests:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour le setup des tests
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildTestSetupPrompt(context) {
    return `
G√©n√®re un fichier de setup pour les tests Jest avec React Testing Library.

Le setup doit:
1. Importer les extensions n√©cessaires de Jest
2. Configurer les globales pour les tests
3. Configurer le cleanup apr√®s chaque test
4. Importer les matchers personnalis√©s de Testing Library
5. Configurer les mocks globaux si n√©cessaires

G√©n√®re uniquement le code de setup, sans explications suppl√©mentaires.
`;
  }
}

module.exports = TestGenerator;