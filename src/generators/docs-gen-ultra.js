// ==============================================
// üìù DOCS GENERATOR - G√©n√©rateur de Documentation
// ==============================================
// Version: 2.0.0 Ultra Instinct
// Auteur: Jarvis Expert
// Description: G√©n√©rateur intelligent de documentation technique
// compl√®te avec guides, API docs, tutoriels et diagrammes
// ==============================================

import fs from 'fs/promises';
import path from 'path';
import GroqClient from '../utils/groq-client.js';
import Logger from '../utils/logger.js';
import { formatCode } from '../utils/formatters.js';

/**
 * G√©n√©rateur de documentation intelligent
 */
export default class DocsGenerator {
  constructor(groqClient, memory) {
    this.groqClient = groqClient || new GroqClient();
    this.memory = memory;
    this.logger = new Logger('DocsGenerator');
    
    // Types de documentation support√©s
    this.docTypes = {
      api: 'Documentation API REST/GraphQL',
      component: 'Documentation de composants React',
      database: 'Documentation de base de donn√©es',
      deployment: 'Guide de d√©ploiement',
      development: 'Guide de d√©veloppement',
      user: 'Guide utilisateur',
      architecture: 'Documentation d\'architecture',
      changelog: 'Journal des modifications'
    };
    
    // Formats de sortie
    this.outputFormats = {
      markdown: { ext: 'md', name: 'Markdown' },
      html: { ext: 'html', name: 'HTML' },
      pdf: { ext: 'pdf', name: 'PDF' },
      docx: { ext: 'docx', name: 'Word' },
      json: { ext: 'json', name: 'JSON' }
    };
    
    // Templates de documentation
    this.templates = {
      readme: this.getReadmeTemplate(),
      api: this.getAPITemplate(),
      component: this.getComponentTemplate(),
      guide: this.getGuideTemplate(),
      changelog: this.getChangelogTemplate()
    };
  }
  
  /**
   * G√©n√©ration compl√®te de documentation
   */
  async generateDocumentation(spec, options = {}) {
    try {
      this.logger.info(`üìù G√©n√©ration de la documentation: ${spec.name}`);
      
      const config = {
        types: ['readme', 'api', 'development'],
        format: 'markdown',
        includeExamples: true,
        includeDiagrams: true,
        includeScreenshots: false,
        language: 'fr',
        outputDir: './docs',
        generateIndex: true,
        ...options
      };
      
      // Analyse de la sp√©cification
      const docSpec = await this.analyzeDocumentationSpec(spec, config);
      
      // G√©n√©ration des diff√©rents types de documentation
      const docs = [];
      
      for (const type of config.types) {
        const doc = await this.generateDocumentationType(type, docSpec, config);
        docs.push(doc);
      }
      
      // G√©n√©ration de l'index si demand√©
      if (config.generateIndex) {
        const index = await this.generateIndex(docs, docSpec, config);
        docs.unshift(index);
      }
      
      // G√©n√©ration des assets (diagrammes, images)
      const assets = config.includeDiagrams ? await this.generateAssets(docSpec, config) : [];
      
      // Structure du projet de documentation
      const structure = await this.createDocsStructure(docSpec, config);
      
      // Configuration et m√©tadonn√©es
      const configFiles = await this.generateDocsConfig(docSpec, config);
      
      return {
        success: true,
        documentation: {
          spec: docSpec,
          docs,
          assets,
          structure,
          config: configFiles
        },
        metadata: {
          types: config.types,
          format: config.format,
          pages: docs.length,
          assets: assets.length,
          timestamp: Date.now()
        }
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erreur g√©n√©ration documentation:', error);
      throw error;
    }
  }
  
  /**
   * Analyse de la sp√©cification de documentation
   */
  async analyzeDocumentationSpec(spec, config) {
    const prompt = `
Analyse cette sp√©cification de projet et d√©termine la documentation n√©cessaire:

Sp√©cification:
${JSON.stringify(spec, null, 2)}

Configuration:
${JSON.stringify(config, null, 2)}

Retourne une sp√©cification de documentation avec:
- Structure recommand√©e
- Sections n√©cessaires
- Niveau de d√©tail appropri√©
- Audience cible
- Exemples requis
- Diagrammes utiles
`;
    
    const analysis = await this.groqClient.generateCode({
      type: 'documentation-analysis',
      prompt,
      context: { spec, config }
    });
    
    return {
      ...spec,
      ...analysis,
      sections: this.normalizeSections(analysis.sections || []),
      audience: analysis.audience || ['developers', 'users'],
      complexity: analysis.complexity || 'medium',
      examples: analysis.examples || []
    };
  }
  
  /**
   * G√©n√©ration d'un type de documentation sp√©cifique
   */
  async generateDocumentationType(type, docSpec, config) {
    switch (type) {
      case 'readme':
        return await this.generateReadme(docSpec, config);
      case 'api':
        return await this.generateAPIDoc(docSpec, config);
      case 'component':
        return await this.generateComponentDoc(docSpec, config);
      case 'development':
        return await this.generateDevelopmentGuide(docSpec, config);
      case 'deployment':
        return await this.generateDeploymentGuide(docSpec, config);
      case 'user':
        return await this.generateUserGuide(docSpec, config);
      case 'architecture':
        return await this.generateArchitectureDoc(docSpec, config);
      case 'changelog':
        return await this.generateChangelog(docSpec, config);
      default:
        throw new Error(`Type de documentation non support√©: ${type}`);
    }
  }
  
  /**
   * G√©n√©ration du README
   */
  async generateReadme(docSpec, config) {
    const prompt = `
G√©n√®re un README.md complet et professionnel pour ce projet:

Projet: ${JSON.stringify(docSpec, null, 2)}
Langue: ${config.language}

Inclus:
- Titre et description accrocheuse
- Badges de statut
- Table des mati√®res
- Installation et configuration
- Utilisation avec exemples
- API/Fonctionnalit√©s principales
- Contribution et d√©veloppement
- Licence et cr√©dits
- Screenshots si appropri√©
- Liens utiles

Style: Professionnel, clair et engageant
`;
    
    const readmeContent = await this.groqClient.generateCode({
      type: 'readme-doc',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'README',
      type: 'readme',
      content: readmeContent,
      filename: 'README.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration de la documentation API
   */
  async generateAPIDoc(docSpec, config) {
    const prompt = `
G√©n√®re une documentation API compl√®te:

API: ${JSON.stringify(docSpec.api || {}, null, 2)}
Endpoints: ${JSON.stringify(docSpec.endpoints || [], null, 2)}
Langue: ${config.language}

Inclus:
- Introduction et authentification
- Liste compl√®te des endpoints
- Param√®tres et corps de requ√™te
- Exemples de requ√™tes/r√©ponses
- Codes d'erreur et gestion
- Rate limiting et quotas
- SDK et biblioth√®ques
- Changelog API
- Postman collection

Format: Markdown avec syntaxe claire
`;
    
    const apiDocContent = await this.groqClient.generateCode({
      type: 'api-doc',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'API Documentation',
      type: 'api',
      content: apiDocContent,
      filename: 'api.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration de la documentation des composants
   */
  async generateComponentDoc(docSpec, config) {
    const prompt = `
G√©n√®re une documentation compl√®te des composants:

Composants: ${JSON.stringify(docSpec.components || [], null, 2)}
Framework: ${docSpec.framework || 'React'}
Langue: ${config.language}

Inclus:
- Guide d'utilisation des composants
- Props et API de chaque composant
- Exemples d'utilisation
- Storybook integration
- Th√®mes et personnalisation
- Bonnes pratiques
- Patterns de composition
- Tests et validation

Format: Markdown avec exemples de code
`;
    
    const componentDocContent = await this.groqClient.generateCode({
      type: 'component-doc',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'Components Documentation',
      type: 'component',
      content: componentDocContent,
      filename: 'components.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration du guide de d√©veloppement
   */
  async generateDevelopmentGuide(docSpec, config) {
    const prompt = `
G√©n√®re un guide de d√©veloppement complet:

Projet: ${JSON.stringify(docSpec, null, 2)}
Technologies: ${JSON.stringify(docSpec.technologies || [], null, 2)}
Langue: ${config.language}

Inclus:
- Configuration de l'environnement
- Structure du projet
- Standards de code
- Workflow Git et branches
- Tests et qualit√©
- Debugging et profiling
- Performance et optimisation
- S√©curit√© et bonnes pratiques
- CI/CD et automatisation
- Troubleshooting courant

Format: Guide √©tape par √©tape
`;
    
    const devGuideContent = await this.groqClient.generateCode({
      type: 'development-guide',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'Development Guide',
      type: 'development',
      content: devGuideContent,
      filename: 'development.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration du guide de d√©ploiement
   */
  async generateDeploymentGuide(docSpec, config) {
    const prompt = `
G√©n√®re un guide de d√©ploiement d√©taill√©:

Projet: ${JSON.stringify(docSpec, null, 2)}
Infrastructure: ${JSON.stringify(docSpec.infrastructure || {}, null, 2)}
Langue: ${config.language}

Inclus:
- Pr√©requis et d√©pendances
- Configuration des environnements
- D√©ploiement local/staging/production
- Variables d'environnement
- Base de donn√©es et migrations
- Monitoring et logs
- Backup et restauration
- Scaling et performance
- S√©curit√© et SSL
- Rollback et maintenance

Format: Instructions √©tape par √©tape
`;
    
    const deploymentGuideContent = await this.groqClient.generateCode({
      type: 'deployment-guide',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'Deployment Guide',
      type: 'deployment',
      content: deploymentGuideContent,
      filename: 'deployment.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration du guide utilisateur
   */
  async generateUserGuide(docSpec, config) {
    const prompt = `
G√©n√®re un guide utilisateur convivial:

Application: ${JSON.stringify(docSpec, null, 2)}
Fonctionnalit√©s: ${JSON.stringify(docSpec.features || [], null, 2)}
Langue: ${config.language}

Inclus:
- Introduction et premiers pas
- Interface utilisateur
- Fonctionnalit√©s principales
- Tutoriels √©tape par √©tape
- FAQ et probl√®mes courants
- Raccourcis et astuces
- Param√®tres et personnalisation
- Support et contact
- Glossaire des termes

Style: Accessible et non-technique
`;
    
    const userGuideContent = await this.groqClient.generateCode({
      type: 'user-guide',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'User Guide',
      type: 'user',
      content: userGuideContent,
      filename: 'user-guide.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration de la documentation d'architecture
   */
  async generateArchitectureDoc(docSpec, config) {
    const prompt = `
G√©n√®re une documentation d'architecture technique:

Architecture: ${JSON.stringify(docSpec.architecture || {}, null, 2)}
Technologies: ${JSON.stringify(docSpec.technologies || [], null, 2)}
Langue: ${config.language}

Inclus:
- Vue d'ensemble de l'architecture
- Diagrammes de composants
- Flux de donn√©es
- Patterns et principes
- D√©cisions techniques
- Scalabilit√© et performance
- S√©curit√© et conformit√©
- Int√©grations externes
- Evolution et roadmap
- Alternatives consid√©r√©es

Format: Documentation technique d√©taill√©e
`;
    
    const architectureDocContent = await this.groqClient.generateCode({
      type: 'architecture-doc',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'Architecture Documentation',
      type: 'architecture',
      content: architectureDocContent,
      filename: 'architecture.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration du changelog
   */
  async generateChangelog(docSpec, config) {
    const prompt = `
G√©n√®re un changelog structur√©:

Projet: ${docSpec.name}
Versions: ${JSON.stringify(docSpec.versions || [], null, 2)}
Langue: ${config.language}

Inclus:
- Format Keep a Changelog
- Versions avec dates
- Cat√©gories: Added, Changed, Deprecated, Removed, Fixed, Security
- Liens vers releases
- Migration guides si n√©cessaire
- Breaking changes clairement marqu√©s

Format: Markdown standardis√©
`;
    
    const changelogContent = await this.groqClient.generateCode({
      type: 'changelog-doc',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'Changelog',
      type: 'changelog',
      content: changelogContent,
      filename: 'CHANGELOG.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration de l'index de documentation
   */
  async generateIndex(docs, docSpec, config) {
    const prompt = `
G√©n√®re un index/sommaire pour cette documentation:

Documents: ${JSON.stringify(docs.map(d => ({ name: d.name, type: d.type })), null, 2)}
Projet: ${docSpec.name}
Langue: ${config.language}

Inclus:
- Table des mati√®res hi√©rarchique
- Description de chaque section
- Liens vers les documents
- Guide de navigation
- Recherche et filtres
- Statut de chaque document
- Derni√®re mise √† jour

Format: Page d'accueil attractive
`;
    
    const indexContent = await this.groqClient.generateCode({
      type: 'docs-index',
      prompt,
      context: { docs, docSpec, config }
    });
    
    return {
      name: 'Documentation Index',
      type: 'index',
      content: indexContent,
      filename: 'index.md',
      format: 'markdown'
    };
  }
  
  /**
   * G√©n√©ration des assets (diagrammes, images)
   */
  async generateAssets(docSpec, config) {
    const assets = [];
    
    // Diagramme d'architecture
    if (docSpec.architecture) {
      const architectureDiagram = await this.generateArchitectureDiagram(docSpec, config);
      assets.push(architectureDiagram);
    }
    
    // Diagramme de flux de donn√©es
    if (docSpec.dataFlow) {
      const dataFlowDiagram = await this.generateDataFlowDiagram(docSpec, config);
      assets.push(dataFlowDiagram);
    }
    
    // Diagramme de base de donn√©es
    if (docSpec.database) {
      const dbDiagram = await this.generateDatabaseDiagram(docSpec, config);
      assets.push(dbDiagram);
    }
    
    // Diagrammes de s√©quence pour l'API
    if (docSpec.api) {
      const sequenceDiagrams = await this.generateSequenceDiagrams(docSpec, config);
      assets.push(...sequenceDiagrams);
    }
    
    return assets;
  }
  
  /**
   * G√©n√©ration du diagramme d'architecture
   */
  async generateArchitectureDiagram(docSpec, config) {
    const prompt = `
G√©n√®re un diagramme d'architecture en Mermaid:

Architecture: ${JSON.stringify(docSpec.architecture, null, 2)}
Composants: ${JSON.stringify(docSpec.components || [], null, 2)}

Cr√©e un diagramme qui montre:
- Composants principaux
- Relations et d√©pendances
- Flux de donn√©es
- Interfaces externes
- Couches d'abstraction

Format: Syntaxe Mermaid
`;
    
    const diagramCode = await this.groqClient.generateCode({
      type: 'architecture-diagram',
      prompt,
      context: { docSpec, config }
    });
    
    return {
      name: 'Architecture Diagram',
      type: 'diagram',
      content: diagramCode,
      filename: 'architecture.mmd',
      format: 'mermaid'
    };
  }
  
  /**
   * Templates de documentation
   */
  getReadmeTemplate() {
    return `
# {{projectName}}

{{description}}

## üöÄ Installation

\`\`\`bash
npm install {{packageName}}
\`\`\`

## üìñ Utilisation

\`\`\`javascript
// Exemple d'utilisation
\`\`\`

## üìö Documentation

- [Guide de d√©veloppement](./docs/development.md)
- [Documentation API](./docs/api.md)
- [Guide de d√©ploiement](./docs/deployment.md)

## ü§ù Contribution

Les contributions sont les bienvenues ! Consultez le [guide de contribution](./CONTRIBUTING.md).

## üìÑ Licence

Ce projet est sous licence {{license}}.
    `;
  }
  
  getAPITemplate() {
    return `
# Documentation API

## Authentification

## Endpoints

### {{endpoint}}

**{{method}}** \`{{path}}\`

{{description}}

#### Param√®tres

#### R√©ponse

#### Exemples
    `;
  }
  
  getComponentTemplate() {
    return `
# Documentation des Composants

## {{componentName}}

{{description}}

### Props

### Utilisation

\`\`\`jsx
<{{componentName}} />
\`\`\`

### Exemples
    `;
  }
  
  getGuideTemplate() {
    return `
# {{guideTitle}}

## Introduction

## Pr√©requis

## √âtapes

### √âtape 1

### √âtape 2

## D√©pannage

## Ressources suppl√©mentaires
    `;
  }
  
  getChangelogTemplate() {
    return `
# Changelog

Toutes les modifications notables de ce projet seront document√©es dans ce fichier.

Le format est bas√© sur [Keep a Changelog](https://keepachangelog.com/fr/1.0.0/),
et ce projet adh√®re au [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Non publi√©]

## [{{version}}] - {{date}}

### Ajout√©
### Modifi√©
### D√©pr√©ci√©
### Supprim√©
### Corrig√©
### S√©curit√©
    `;
  }
  
  /**
   * Cr√©ation de la structure de documentation
   */
  async createDocsStructure(docSpec, config) {
    const structure = {
      'docs/': {
        'api/': {},
        'guides/': {},
        'assets/': {
          'images/': {},
          'diagrams/': {},
          'videos/': {}
        },
        'examples/': {},
        'templates/': {}
      }
    };
    
    // Ajout des fichiers selon les types demand√©s
    for (const type of config.types) {
      switch (type) {
        case 'api':
          structure['docs/']['api/']['endpoints.md'] = 'Documentation des endpoints';
          structure['docs/']['api/']['authentication.md'] = 'Guide d\'authentification';
          break;
        case 'component':
          structure['docs/']['components/'] = {};
          break;
        case 'development':
          structure['docs/']['guides/']['development.md'] = 'Guide de d√©veloppement';
          break;
      }
    }
    
    return structure;
  }
  
  /**
   * G√©n√©ration de la configuration de documentation
   */
  async generateDocsConfig(docSpec, config) {
    const configFiles = [];
    
    // Configuration Docusaurus si demand√©
    if (config.platform === 'docusaurus') {
      const docusaurusConfig = await this.generateDocusaurusConfig(docSpec, config);
      configFiles.push(docusaurusConfig);
    }
    
    // Configuration GitBook si demand√©
    if (config.platform === 'gitbook') {
      const gitbookConfig = await this.generateGitBookConfig(docSpec, config);
      configFiles.push(gitbookConfig);
    }
    
    // Configuration g√©n√©rique
    const genericConfig = await this.generateGenericConfig(docSpec, config);
    configFiles.push(genericConfig);
    
    return configFiles;
  }
  
  /**
   * Utilitaires
   */
  normalizeSections(sections) {
    return sections.map(section => ({
      name: section.name,
      title: section.title || section.name,
      description: section.description || '',
      order: section.order || 0,
      subsections: section.subsections || [],
      required: section.required || false
    }));
  }
  
  /**
   * Conversion de formats
   */
  async convertToFormat(content, fromFormat, toFormat) {
    if (fromFormat === toFormat) return content;
    
    // Impl√©mentation de conversion entre formats
    // Markdown -> HTML, PDF, etc.
    
    return content; // Simplifi√© pour l'exemple
  }
  
  /**
   * Validation de la documentation
   */
  async validateDocumentation(docs) {
    const issues = [];
    
    for (const doc of docs) {
      // V√©rification des liens bris√©s
      // V√©rification de la structure
      // V√©rification de la grammaire
      // V√©rification des exemples de code
    }
    
    return {
      isValid: issues.length === 0,
      issues
    };
  }
  
  /**
   * G√©n√©ration de m√©triques de documentation
   */
  async generateMetrics(docs) {
    return {
      totalPages: docs.length,
      totalWords: docs.reduce((sum, doc) => sum + (doc.content?.split(' ').length || 0), 0),
      coverage: this.calculateCoverage(docs),
      lastUpdated: Date.now(),
      languages: ['fr'], // Bas√© sur la configuration
      formats: [...new Set(docs.map(d => d.format))]
    };
  }
  
  calculateCoverage(docs) {
    // Calcul du pourcentage de couverture de la documentation
    // bas√© sur les sections requises vs pr√©sentes
    return 85; // Exemple
  }
}

