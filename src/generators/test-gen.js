// ==============================================
// üß™ TEST GENERATOR - G√©n√©rateur de Tests Ultra Instinct
// ==============================================
// Version: 2.0.0 Ultra Instinct
// Auteur: Jarvis Expert
// Description: G√©n√©rateur intelligent de tests Jest + React Testing Library
// avec couverture compl√®te, tests d'accessibilit√© et mocking automatique
// ==============================================

import fs from "fs/promises";
import path from "path";
import Logger from "../core/logger.js";
import CodeFormatter from "../utils/formatters.js";

/**
 * G√©n√©rateur de tests avec IA
 */
export default class TestGenerator {
  constructor(groqClient, memorySystem) {
    this.groqClient = groqClient;
    this.memory = memorySystem;
    this.logger = new Logger("TestGenerator");

    // Configuration par d√©faut
    this.defaultConfig = {
      framework: "jest", // jest, vitest
      testingLibrary: "@testing-library/react",
      coverage: true,
      accessibility: true,
      integration: true,
      e2e: false,
      mocking: true,
      snapshots: false,
      performance: false,
    };

    // Types de tests support√©s
    this.testTypes = {
      unit: "Tests unitaires",
      integration: "Tests d'int√©gration",
      accessibility: "Tests d'accessibilit√©",
      performance: "Tests de performance",
      e2e: "Tests end-to-end",
      visual: "Tests visuels",
    };

    // Patterns de test
    this.testPatterns = {
      component: "component-test.pattern",
      hook: "hook-test.pattern",
      utility: "utility-test.pattern",
      api: "api-test.pattern",
    };
  }

  /**
   * G√©n√©ration principale de tests
   */
  async generateTests(spec, sourceCode, options = {}) {
    try {
      const config = { ...this.defaultConfig, ...options };

      this.logger.info(`üß™ G√©n√©ration des tests: ${spec.name}`);

      // Analyse du code source pour comprendre la structure
      const codeAnalysis = await this.analyzeSourceCode(sourceCode, spec);

      // G√©n√©ration des diff√©rents types de tests
      const testSuites = await this.generateTestSuites(
        spec,
        codeAnalysis,
        config,
      );

      // G√©n√©ration des mocks si n√©cessaire
      const mocks = config.mocking
        ? await this.generateMocks(codeAnalysis)
        : null;

      // G√©n√©ration de la configuration de test
      const testConfig = await this.generateTestConfig(spec, config);

      // Formatage de tous les fichiers de test
      const formattedTests = await this.formatTestFiles(testSuites);

      // Sauvegarde en m√©moire
      await this.saveToMemory(spec, testSuites, codeAnalysis);

      const result = {
        success: true,
        tests: {
          name: spec.name,
          suites: formattedTests,
          mocks,
          config: testConfig,
          analysis: codeAnalysis,
        },
        metadata: {
          timestamp: Date.now(),
          config,
          coverage: this.estimateCoverage(testSuites, codeAnalysis),
        },
      };

      this.logger.info(`‚úÖ Tests ${spec.name} g√©n√©r√©s avec succ√®s`);

      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur g√©n√©ration tests ${spec.name}:`, error);
      return {
        success: false,
        error: error.message,
        tests: null,
      };
    }
  }

  /**
   * G√©n√©ration de tests pour composant React
   */
  async generateComponentTests(componentSpec, componentCode, options = {}) {
    try {
      const config = { ...this.defaultConfig, ...options };

      this.logger.info(
        `‚öõÔ∏è G√©n√©ration des tests de composant: ${componentSpec.name}`,
      );

      // Analyse sp√©cifique au composant React
      const componentAnalysis = await this.analyzeReactComponent(
        componentCode,
        componentSpec,
      );

      // G√©n√©ration des tests unitaires
      const unitTests = await this.generateUnitTests(
        componentSpec,
        componentAnalysis,
        config,
      );

      // G√©n√©ration des tests d'int√©gration
      const integrationTests = config.integration
        ? await this.generateIntegrationTests(
            componentSpec,
            componentAnalysis,
            config,
          )
        : null;

      // G√©n√©ration des tests d'accessibilit√©
      const a11yTests = config.accessibility
        ? await this.generateAccessibilityTests(
            componentSpec,
            componentAnalysis,
            config,
          )
        : null;

      // G√©n√©ration des tests de performance
      const performanceTests = config.performance
        ? await this.generatePerformanceTests(
            componentSpec,
            componentAnalysis,
            config,
          )
        : null;

      return {
        success: true,
        tests: {
          unit: unitTests,
          integration: integrationTests,
          accessibility: a11yTests,
          performance: performanceTests,
        },
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur g√©n√©ration tests composant:`, error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * G√©n√©ration de tests pour hook React
   */
  async generateHookTests(hookSpec, hookCode, options = {}) {
    try {
      const config = { ...this.defaultConfig, ...options };

      this.logger.info(`ü™ù G√©n√©ration des tests de hook: ${hookSpec.name}`);

      // Analyse du hook
      const hookAnalysis = await this.analyzeReactHook(hookCode, hookSpec);

      // G√©n√©ration des tests de hook
      const hookTests = await this.generateHookTestCode(
        hookSpec,
        hookAnalysis,
        config,
      );

      return {
        success: true,
        tests: hookTests,
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur g√©n√©ration tests hook:`, error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Analyse du code source
   */
  async analyzeSourceCode(sourceCode, spec) {
    const prompt = `
Analyse ce code source pour g√©n√©rer des tests complets:

Code:
${sourceCode}

Sp√©cification:
${JSON.stringify(spec, null, 2)}

Analyse et extrais:
1. Fonctions/m√©thodes √† tester
2. Props/param√®tres d'entr√©e
3. Valeurs de retour attendues
4. Effets de bord
5. D√©pendances externes
6. √âtats internes
7. Cas limites √† tester
8. Sc√©narios d'erreur
9. Interactions utilisateur
10. Assertions n√©cessaires

Retourne un JSON structur√© avec ces informations.
`;

    const response = await this.groqClient.analyzeContext({ prompt });
    return response;
  }

  /**
   * Analyse sp√©cifique d'un composant React
   */
  async analyzeReactComponent(componentCode, componentSpec) {
    const prompt = `
Analyse ce composant React pour g√©n√©rer des tests complets:

Code du composant:
${componentCode}

Sp√©cification:
${JSON.stringify(componentSpec, null, 2)}

Analyse sp√©cifiquement:
1. Props du composant et leurs types
2. √âtat local (useState, useReducer)
3. Effets (useEffect, useLayoutEffect)
4. √âv√©nements et callbacks
5. Rendu conditionnel
6. Boucles et listes
7. Refs et DOM
8. Contextes utilis√©s
9. Hooks personnalis√©s
10. Accessibilit√© (ARIA, r√¥les)
11. Interactions clavier/souris
12. Cas d'erreur et loading

Retourne un JSON avec les √©l√©ments √† tester.
`;

    const response = await this.groqClient.analyzeContext({ prompt });
    return response;
  }

  /**
   * Analyse d'un hook React
   */
  async analyzeReactHook(hookCode, hookSpec) {
    const prompt = `
Analyse ce hook React personnalis√©:

Code du hook:
${hookCode}

Sp√©cification:
${JSON.stringify(hookSpec, null, 2)}

Analyse:
1. Param√®tres d'entr√©e
2. Valeurs de retour
3. √âtat interne
4. Effets et nettoyage
5. D√©pendances
6. Optimisations (useMemo, useCallback)
7. Cas d'erreur
8. Cycles de vie

Retourne un JSON avec les √©l√©ments √† tester.
`;

    const response = await this.groqClient.analyzeContext({ prompt });
    return response;
  }

  /**
   * G√©n√©ration des suites de tests
   */
  async generateTestSuites(spec, analysis, config) {
    const suites = {};

    // Tests unitaires (toujours g√©n√©r√©s)
    suites.unit = await this.generateUnitTests(spec, analysis, config);

    // Tests d'int√©gration
    if (config.integration) {
      suites.integration = await this.generateIntegrationTests(
        spec,
        analysis,
        config,
      );
    }

    // Tests d'accessibilit√©
    if (config.accessibility) {
      suites.accessibility = await this.generateAccessibilityTests(
        spec,
        analysis,
        config,
      );
    }

    // Tests de performance
    if (config.performance) {
      suites.performance = await this.generatePerformanceTests(
        spec,
        analysis,
        config,
      );
    }

    return suites;
  }

  /**
   * G√©n√©ration des tests unitaires
   */
  async generateUnitTests(spec, analysis, config) {
    const prompt = `
G√©n√®re des tests unitaires complets avec Jest et React Testing Library:

√âl√©ment √† tester: ${spec.name}
Type: ${spec.type}
Analyse: ${JSON.stringify(analysis, null, 2)}

Configuration:
- Framework: ${config.framework}
- Testing Library: ${config.testingLibrary}
- Mocking: ${config.mocking}
- Snapshots: ${config.snapshots}

Les tests doivent couvrir:
1. Rendu par d√©faut
2. Props et leur impact
3. Interactions utilisateur
4. √âtats et transitions
5. √âv√©nements et callbacks
6. Cas limites
7. Gestion d'erreurs
8. Nettoyage et unmount

Utilise les bonnes pratiques:
- Arrange, Act, Assert
- Tests descriptifs et lisibles
- Mocking appropri√©
- Assertions pr√©cises
- Nettoyage apr√®s chaque test

Retourne uniquement le code des tests.
`;

    const response = await this.groqClient.generateCode(
      {
        type: "unit-tests",
        name: `${spec.name}.test.js`,
        prompt,
      },
      {
        temperature: 0.5,
        maxTokens: 3072,
      },
    );

    return {
      filename: `${spec.name}.test.js`,
      content: response.code,
      type: "unit",
    };
  }

  /**
   * G√©n√©ration des tests d'int√©gration
   */
  async generateIntegrationTests(spec, analysis, config) {
    const prompt = `
G√©n√®re des tests d'int√©gration pour ${spec.name}:

Analyse: ${JSON.stringify(analysis, null, 2)}

Les tests d'int√©gration doivent couvrir:
1. Interaction avec d'autres composants
2. Flux de donn√©es complets
3. Int√©gration avec les contextes
4. Appels API et gestion des r√©ponses
5. Navigation et routing
6. Gestion d'√©tat globale
7. Effets de bord complexes

Utilise des sc√©narios r√©alistes d'utilisation.

Retourne uniquement le code des tests d'int√©gration.
`;

    const response = await this.groqClient.generateCode({
      type: "integration-tests",
      name: `${spec.name}.integration.test.js`,
      prompt,
    });

    return {
      filename: `${spec.name}.integration.test.js`,
      content: response.code,
      type: "integration",
    };
  }

  /**
   * G√©n√©ration des tests d'accessibilit√©
   */
  async generateAccessibilityTests(spec, analysis, config) {
    const prompt = `
G√©n√®re des tests d'accessibilit√© avec jest-axe et Testing Library:

√âl√©ment: ${spec.name}
Analyse: ${JSON.stringify(analysis, null, 2)}

Les tests d'accessibilit√© doivent v√©rifier:
1. Conformit√© WCAG 2.1
2. Navigation au clavier
3. Lecteurs d'√©cran (ARIA)
4. Contraste et visibilit√©
5. Focus management
6. R√¥les et propri√©t√©s ARIA
7. Textes alternatifs
8. Ordre de tabulation

Utilise:
- jest-axe pour les r√®gles automatiques
- user-event pour les interactions clavier
- screen reader testing utilities

Retourne uniquement le code des tests d'accessibilit√©.
`;

    const response = await this.groqClient.generateCode({
      type: "accessibility-tests",
      name: `${spec.name}.a11y.test.js`,
      prompt,
    });

    return {
      filename: `${spec.name}.a11y.test.js`,
      content: response.code,
      type: "accessibility",
    };
  }

  /**
   * G√©n√©ration des tests de performance
   */
  async generatePerformanceTests(spec, analysis, config) {
    const prompt = `
G√©n√®re des tests de performance pour ${spec.name}:

Analyse: ${JSON.stringify(analysis, null, 2)}

Les tests de performance doivent mesurer:
1. Temps de rendu initial
2. Temps de re-rendu
3. Utilisation m√©moire
4. Nombre de re-renders
5. Performance des interactions
6. Lazy loading et code splitting
7. Bundle size impact

Utilise:
- React Profiler API
- Performance measurement APIs
- Memory usage tracking
- Render counting

Retourne uniquement le code des tests de performance.
`;

    const response = await this.groqClient.generateCode({
      type: "performance-tests",
      name: `${spec.name}.perf.test.js`,
      prompt,
    });

    return {
      filename: `${spec.name}.perf.test.js`,
      content: response.code,
      type: "performance",
    };
  }

  /**
   * G√©n√©ration du code de test pour hook
   */
  async generateHookTestCode(hookSpec, analysis, config) {
    const prompt = `
G√©n√®re des tests complets pour ce hook React:

Hook: ${hookSpec.name}
Analyse: ${JSON.stringify(analysis, null, 2)}

Les tests doivent couvrir:
1. Valeurs initiales
2. Mise √† jour de l'√©tat
3. Effets et nettoyage
4. Param√®tres d'entr√©e
5. Valeurs de retour
6. Optimisations
7. Cas d'erreur
8. Cycles de vie

Utilise @testing-library/react-hooks pour tester les hooks.

Structure:
- describe() pour grouper les tests
- test() pour chaque cas
- renderHook() pour tester le hook
- act() pour les mises √† jour
- waitFor() pour les effets asynchrones

Retourne uniquement le code des tests.
`;

    const response = await this.groqClient.generateCode({
      type: "hook-tests",
      name: `${hookSpec.name}.test.js`,
      prompt,
    });

    return {
      filename: `${hookSpec.name}.test.js`,
      content: response.code,
      type: "hook",
    };
  }

  /**
   * G√©n√©ration des mocks
   */
  async generateMocks(analysis) {
    if (!analysis.dependencies || analysis.dependencies.length === 0) {
      return null;
    }

    const prompt = `
G√©n√®re des mocks Jest pour ces d√©pendances:

D√©pendances: ${JSON.stringify(analysis.dependencies, null, 2)}

G√©n√®re des mocks pour:
1. Modules externes
2. APIs et services
3. Hooks personnalis√©s
4. Utilitaires
5. Composants enfants

Les mocks doivent:
- Simuler le comportement r√©el
- Permettre la v√©rification des appels
- √ätre configurables pour diff√©rents sc√©narios
- G√©rer les cas d'erreur

Retourne le code des mocks.
`;

    const response = await this.groqClient.generateCode({
      type: "mocks",
      name: "__mocks__",
      prompt,
    });

    return {
      filename: "__mocks__/index.js",
      content: response.code,
      type: "mocks",
    };
  }

  /**
   * G√©n√©ration de la configuration de test
   */
  async generateTestConfig(spec, config) {
    const jestConfig = {
      testEnvironment: "jsdom",
      setupFilesAfterEnv: ["<rootDir>/src/setupTests.js"],
      moduleNameMapping: {
        "\\.(css|less|scss|sass)$": "identity-obj-proxy",
      },
      collectCoverageFrom: [
        "src/**/*.{js,jsx,ts,tsx}",
        "!src/**/*.d.ts",
        "!src/index.js",
        "!src/reportWebVitals.js",
      ],
      coverageThreshold: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80,
        },
      },
      testMatch: [
        "<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}",
        "<rootDir>/src/**/*.{spec,test}.{js,jsx,ts,tsx}",
      ],
    };

    if (config.accessibility) {
      jestConfig.setupFilesAfterEnv.push("<rootDir>/src/setupA11yTests.js");
    }

    return {
      filename: "jest.config.js",
      content: `module.exports = ${JSON.stringify(jestConfig, null, 2)};`,
      type: "config",
    };
  }

  /**
   * Formatage des fichiers de test
   */
  async formatTestFiles(testSuites) {
    const formatted = {};

    for (const [type, suite] of Object.entries(testSuites)) {
      if (suite && suite.content) {
        formatted[type] = {
          ...suite,
          content: await formatCode(suite.content, "javascript"),
        };
      }
    }

    return formatted;
  }

  /**
   * Estimation de la couverture de code
   */
  estimateCoverage(testSuites, analysis) {
    let coverage = 0;
    let totalElements = 0;

    // Calcul bas√© sur les √©l√©ments analys√©s et les tests g√©n√©r√©s
    if (analysis.functions) {
      totalElements += analysis.functions.length;
      coverage += analysis.functions.length * 0.8; // Estimation 80% de couverture
    }

    if (analysis.props) {
      totalElements += analysis.props.length;
      coverage += analysis.props.length * 0.9; // Props g√©n√©ralement bien test√©es
    }

    if (analysis.events) {
      totalElements += analysis.events.length;
      coverage += analysis.events.length * 0.7; // √âv√©nements parfois complexes
    }

    return totalElements > 0 ? Math.round((coverage / totalElements) * 100) : 0;
  }

  /**
   * Sauvegarde en m√©moire
   */
  async saveToMemory(spec, testSuites, analysis) {
    if (!this.memory.isInitialized) {
      return;
    }

    await this.memory.recordGeneration({
      type: "tests",
      name: spec.name,
      code: JSON.stringify(testSuites),
      analysis,
      domain: "testing",
      timestamp: Date.now(),
      success: true,
      quality: 0.85, // Tests g√©n√©ralement de bonne qualit√©
    });
  }

  /**
   * √âcriture des fichiers de test
   */
  async writeTestFiles(testResult, outputDir) {
    try {
      // Cr√©ation du r√©pertoire de tests
      const testsDir = path.join(outputDir, "__tests__");
      await fs.mkdir(testsDir, { recursive: true });

      const writtenFiles = [];

      // √âcriture de chaque suite de tests
      for (const [type, suite] of Object.entries(testResult.tests.suites)) {
        if (suite && suite.content) {
          const filePath = path.join(testsDir, suite.filename);
          await fs.writeFile(filePath, suite.content);
          writtenFiles.push(suite.filename);
        }
      }

      // √âcriture des mocks
      if (testResult.tests.mocks) {
        const mocksDir = path.join(outputDir, "__mocks__");
        await fs.mkdir(mocksDir, { recursive: true });

        await fs.writeFile(
          path.join(mocksDir, testResult.tests.mocks.filename),
          testResult.tests.mocks.content,
        );
        writtenFiles.push(`__mocks__/${testResult.tests.mocks.filename}`);
      }

      // √âcriture de la configuration
      if (testResult.tests.config) {
        await fs.writeFile(
          path.join(outputDir, testResult.tests.config.filename),
          testResult.tests.config.content,
        );
        writtenFiles.push(testResult.tests.config.filename);
      }

      this.logger.info(`üìÅ Tests √©crits dans: ${testsDir}`);

      return {
        success: true,
        path: testsDir,
        files: writtenFiles,
      };
    } catch (error) {
      this.logger.error("‚ùå Erreur √©criture tests:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Ex√©cution des tests g√©n√©r√©s
   */
  async runTests(testPath, options = {}) {
    try {
      const { spawn } = await import("child_process");

      const testCommand = options.framework === "vitest" ? "vitest" : "jest";
      const args = [testPath];

      if (options.coverage) {
        args.push("--coverage");
      }

      if (options.watch) {
        args.push("--watch");
      }

      return new Promise((resolve, reject) => {
        const testProcess = spawn(testCommand, args, {
          stdio: "pipe",
          cwd: process.cwd(),
        });

        let output = "";
        let errorOutput = "";

        testProcess.stdout.on("data", (data) => {
          output += data.toString();
        });

        testProcess.stderr.on("data", (data) => {
          errorOutput += data.toString();
        });

        testProcess.on("close", (code) => {
          if (code === 0) {
            resolve({
              success: true,
              output,
              coverage: this.parseCoverageOutput(output),
            });
          } else {
            reject(new Error(`Tests failed with code ${code}: ${errorOutput}`));
          }
        });
      });
    } catch (error) {
      this.logger.error("‚ùå Erreur ex√©cution tests:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Parsing de la sortie de couverture
   */
  parseCoverageOutput(output) {
    // Extraction des m√©triques de couverture depuis la sortie Jest
    const coverageMatch = output.match(
      /All files\s+\|\s+([\d.]+)\s+\|\s+([\d.]+)\s+\|\s+([\d.]+)\s+\|\s+([\d.]+)/,
    );

    if (coverageMatch) {
      return {
        statements: parseFloat(coverageMatch[1]),
        branches: parseFloat(coverageMatch[2]),
        functions: parseFloat(coverageMatch[3]),
        lines: parseFloat(coverageMatch[4]),
      };
    }

    return null;
  }

  /**
   * Obtention des statistiques du g√©n√©rateur
   */
  async getStats() {
    if (!this.memory.isInitialized) {
      return { tests: 0, coverage: 0 };
    }

    const testGenerations = await this.memory.search("", {
      type: "generation",
      tags: ["testing"],
    });

    return {
      totalTests: testGenerations.length,
      averageCoverage:
        testGenerations.reduce((sum, g) => sum + (g.data.coverage || 0), 0) /
          testGenerations.length || 0,
      testTypes: {
        unit: testGenerations.filter((g) =>
          g.data.analysis?.testTypes?.includes("unit"),
        ).length,
        integration: testGenerations.filter((g) =>
          g.data.analysis?.testTypes?.includes("integration"),
        ).length,
        accessibility: testGenerations.filter((g) =>
          g.data.analysis?.testTypes?.includes("accessibility"),
        ).length,
        performance: testGenerations.filter((g) =>
          g.data.analysis?.testTypes?.includes("performance"),
        ).length,
      },
    };
  }
}

// Fonctions utilitaires pour l'API
let tests = [
  {
    id: "btn-1",
    name: "Button renders correctly",
    status: "passed",
    content: `test('Button renders correctly', () => { render(<Button />); })`,
  },
  {
    id: "input-2",
    name: "Input handles change",
    status: "failed",
    content: `test('Input handles change', () => { ... })`,
  },
  {
    id: "form-3",
    name: "Form validation works",
    status: "passed",
    content: `test('Form validation works', () => { ... })`,
  },
  {
    id: "modal-4",
    name: "Modal opens and closes",
    status: "pending",
    content: `test('Modal opens and closes', () => { ... })`,
  },
];

export function getAllTests() {
  return tests;
}

export function rerunTestById(id) {
  const test = tests.find((t) => t.id === id);
  if (test) test.status = Math.random() > 0.5 ? "passed" : "failed";
}
