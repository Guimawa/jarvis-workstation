// üìÇ generators/react-gen.js
// ===========================
// G√©n√©rateur de composants React/Next.js
// ===========================

const fs = require('fs');
const path = require('path');
const { formatCode } = require('../utils/formatters');

class ReactGenerator {
  constructor(groqClient, memorySystem) {
    this.groqClient = groqClient;
    this.memory = memorySystem;
  }

  /**
   * G√©n√®re un composant React/Next.js
   * @param {string} name - Nom du composant
   * @param {string} directory - R√©pertoire de destination
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code du composant g√©n√©r√©
   */
  async generateComponent(name, directory, projectContext) {
    try {
      console.log(`üß† G√©n√©ration du composant ${name}...`);

      // Prompt pour Groq bas√© sur le contexte
      const prompt = this.buildComponentPrompt(name, projectContext);
      
      // Appel √† l'API Groq
      const componentCode = await this.groqClient.generateCode(prompt);
      
      // Formatage du code
      const formattedCode = await formatCode(componentCode, 'javascript');
      
      // D√©termination de l'extension
      const extension = projectContext.typescript ? 'tsx' : 'jsx';
      
      // Cr√©ation du r√©pertoire si n√©cessaire
      const componentDir = path.join(process.cwd(), directory);
      if (!fs.existsSync(componentDir)) {
        fs.mkdirSync(componentDir, { recursive: true });
      }
      
      // Chemin du fichier
      const filePath = path.join(componentDir, `${name}.${extension}`);
      
      // √âcriture du fichier
      fs.writeFileSync(filePath, formattedCode);
      
      console.log(`‚úÖ Composant ${name} g√©n√©r√©: ${filePath}`);
      
      // Enregistrement dans la m√©moire
      await this.memory.recordGeneration({
        type: 'component',
        name: name,
        path: filePath,
        context: projectContext,
        timestamp: new Date()
      });
      
      return formattedCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du composant:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour la g√©n√©ration du composant
   * @param {string} name - Nom du composant
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildComponentPrompt(name, context) {
    const { typescript, framework, designSystem } = context;
    
    return `
G√©n√®re un composant ${name} ${typescript ? 'TypeScript' : 'JavaScript'} React pour ${framework}.
Utilise ${designSystem} pour le styling.

Le composant doit:
1. √ätre modulaire et r√©utilisable
2. Suivre les meilleures pratiques React
3. Avoir des PropTypes ou types TypeScript appropri√©s
4. √ätre responsive
5. Avoir une accessibilit√© de base (aria-labels si n√©cessaire)
6. Utiliser des hooks modernes (useState, useEffect, etc.)
7. Inclure des commentaires JSDoc pour les props

G√©n√®re uniquement le code du composant, sans explications suppl√©mentaires.
`;
  }

  /**
   * G√©n√®re une page Next.js
   * @param {string} name - Nom de la page
   * @param {string} directory - R√©pertoire de destination
   * @param {object} projectContext - Contexte du projet
   * @returns {Promise<string>} Code de la page g√©n√©r√©e
   */
  async generatePage(name, directory, projectContext) {
    try {
      console.log(`üß† G√©n√©ration de la page ${name}...`);
      
      // Prompt sp√©cifique pour les pages Next.js
      const prompt = this.buildPagePrompt(name, projectContext);
      
      // Appel √† l'API Groq
      const pageCode = await this.groqClient.generateCode(prompt);
      
      // Formatage du code
      const formattedCode = await formatCode(pageCode, 'javascript');
      
      // D√©termination de l'extension
      const extension = projectContext.typescript ? 'tsx' : 'jsx';
      
      // Chemin du fichier (pages/ pour Next.js, src/pages/ pour autres)
      const pagesDir = projectContext.framework === 'nextjs' 
        ? path.join(process.cwd(), 'pages') 
        : path.join(process.cwd(), 'src', 'pages');
      
      if (!fs.existsSync(pagesDir)) {
        fs.mkdirSync(pagesDir, { recursive: true });
      }
      
      // √âcriture du fichier
      const filePath = path.join(pagesDir, `${name.toLowerCase()}.${extension}`);
      fs.writeFileSync(filePath, formattedCode);
      
      console.log(`‚úÖ Page ${name} g√©n√©r√©e: ${filePath}`);
      
      // Enregistrement dans la m√©moire
      await this.memory.recordGeneration({
        type: 'page',
        name: name,
        path: filePath,
        context: projectContext,
        timestamp: new Date()
      });
      
      return formattedCode;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la page:', error.message);
      throw error;
    }
  }

  /**
   * Construit le prompt pour la g√©n√©ration de page
   * @param {string} name - Nom de la page
   * @param {object} context - Contexte du projet
   * @returns {string} Prompt d√©taill√©
   */
  buildPagePrompt(name, context) {
    const { typescript, framework, designSystem } = context;
    
    return `
G√©n√®re une page ${name} ${typescript ? 'TypeScript' : 'JavaScript'} pour ${framework}.
Utilise ${designSystem} pour le styling.

La page doit:
1. Suivre la structure de routing de ${framework}
2. Inclure les m√©tadonn√©es appropri√©es (title, meta tags)
3. √ätre responsive et accessible
4. Utiliser les meilleures pratiques de performance
5. Inclure des exemples de contenu pertinents
6. G√©rer les √©tats de chargement et d'erreur si n√©cessaire

G√©n√®re uniquement le code de la page, sans explications suppl√©mentaires.
`;
  }
}

module.exports = ReactGenerator;