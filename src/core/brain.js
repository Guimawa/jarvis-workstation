// src/core/brain.js
import { getGroqClient } from "../utils/groq-client.js";
import CodeValidator from "../utils/validators.js";
import CodeFormatter from "../utils/formatters.js";
import MemorySystem from "./memory.js";
import LearningSystem from "./learning.js";

class JarvisBrain {
  constructor() {
    this.memory = new MemorySystem();
    this.learning = new LearningSystem();
    this.groqClient = getGroqClient();
    this.validator = new CodeValidator();
    this.formatter = new CodeFormatter();
    this.currentContext = {};
    this.projectState = {};
    this.isInitialized = false;
  }

  /**
   * Processus principal de g√©n√©ration de code
   * @param {string} prompt - La demande utilisateur
   * @param {Object} context - Le contexte du projet
   * @returns {Promise<Object>} - Le r√©sultat de la g√©n√©ration
   */
  async processRequest(prompt, context = {}) {
    try {
      // 1. √âtape d'√©coute et compr√©hension
      const analyzedReq = await this.understandRequest(prompt, context);

      // 2. Contextualisation avec le projet existant
      await this.loadProjectContext(analyzedReq);

      // 3. Prise de d√©cision sur ce qui doit √™tre g√©n√©r√©
      const generationPlan = this.decideGenerationStrategy(analyzedReq);

      // 4. Ex√©cution de la g√©n√©ration
      const generationResults = await this.executeGeneration(generationPlan);

      // 5. Validation de la qualit√©
      const validatedResults = await this.validateOutput(generationResults);

      // 6. Int√©gration au projet
      const integrationResult = await this.integrateToProject(validatedResults);

      // 7. Documentation et apprentissage
      await this.documentAndLearn(integrationResult, prompt);

      return {
        success: true,
        results: integrationResult,
        message: "G√©n√©ration termin√©e avec succ√®s",
      };
    } catch (error) {
      await this.handleError(error, prompt, context);
      throw error;
    }
  }

  /**
   * Comprendre la demande utilisateur avec Groq
   */
  async understandRequest(prompt, context) {
    console.log("üß† Analyse de la demande...");

    // Optimiser la prompt bas√©e sur l'apprentissage
    const optimizedPrompt = await this.learning.optimizePrompt(prompt);

    const analysis = await this.analyzeRequirements(optimizedPrompt, context);

    // Enrichir avec le contexte de m√©moire
    const enrichedAnalysis =
      await this.memory.enrichWithPastGenerations(analysis);

    this.currentContext = {
      prompt: optimizedPrompt, // ‚Üê Correction : ajout de la virgule
      originalPrompt: prompt, // Garder la originale pour r√©f√©rence
      analysis: enrichedAnalysis,
      timestamp: new Date().toISOString(),
    };

    return enrichedAnalysis;
  }

  /**
   * Charger le contexte du projet existant
   */
  async loadProjectContext(analysis) {
    console.log("üìÅ Chargement du contexte projet...");

    const { projectType, techStack } = analysis;

    // Charger l'√©tat actuel du projet (structure, composants existants, etc.)
    this.projectState = await this.memory.getProjectState(
      projectType,
      techStack,
    );

    // V√©rifier les d√©pendances et compatibilit√©s
    this.projectState.dependencies = await this.checkDependencies(analysis);

    return this.projectState;
  }

  /**
   * D√©cider de la strat√©gie de g√©n√©ration
   */
  decideGenerationStrategy(analysis) {
    console.log("üéØ Planification de la g√©n√©ration...");

    const { components, tests, stories, apis } = analysis;

    const strategy = {
      components: [],
      tests: [],
      stories: [],
      apis: [],
      priority: "medium",
      estimatedTime: 0,
    };

    // D√©terminer quels g√©n√©rateurs utiliser en fonction de l'analyse
    if (components && components.length > 0) {
      strategy.components = this.prioritizeComponents(components);
      strategy.estimatedTime += components.length * 2; // 2min par composant
    }

    if (tests && tests.length > 0) {
      strategy.tests = tests;
      strategy.estimatedTime += tests.length * 1; // 1min par test
    }

    if (stories && stories.length > 0) {
      strategy.stories = stories;
      strategy.estimatedTime += stories.length * 1.5; // 1.5min par story
    }

    if (apis && apis.length > 0) {
      strategy.apis = apis;
      strategy.estimatedTime += apis.length * 3; // 3min par API
    }

    // Ajuster la priorit√© en fonction de la complexit√©
    strategy.priority = strategy.estimatedTime > 10 ? "high" : "medium";

    return strategy;
  }

  /**
   * Ex√©cuter la g√©n√©ration selon le plan
   */
  async executeGeneration(generationPlan) {
    console.log("‚ö° Ex√©cution de la g√©n√©ration...");

    const results = {
      components: [],
      tests: [],
      stories: [],
      apis: [],
      errors: [],
    };

    // G√©n√©rer les composants React
    if (generationPlan.components.length > 0) {
      try {
        const { default: ReactGenerator } = await import(
          "../generators/react-gen.js"
        );
        const reactGen = new ReactGenerator();
        for (const component of generationPlan.components) {
          try {
            const componentCode = await reactGen.generateComponent(
              component,
              this.projectState,
            );
            results.components.push({
              name: component.name,
              code: componentCode,
              path: component.path,
            });
          } catch (error) {
            results.errors.push(
              `Composant ${component.name}: ${error.message}`,
            );
          }
        }
      } catch (error) {
        results.errors.push(`Erreur import ReactGenerator: ${error.message}`);
      }
    }

    // G√©n√©rer les tests (similaire pattern pour les autres g√©n√©rateurs)
    // ... code pour tests, stories, APIs

    return results;
  }

  /**
   * Valider la qualit√© du code g√©n√©r√©
   */
  async validateOutput(generationResults) {
    console.log("‚úÖ Validation de la qualit√©...");

    const validatedResults = {
      components: [],
      tests: [],
      stories: [],
      apis: [],
      warnings: [],
    };

    // Valider chaque composant g√©n√©r√©
    for (const component of generationResults.components) {
      const validation = await this.validator.validateCode(component.code);
      if (validation.valid) {
        const formatResult = await this.formatter.formatCode(component.code);
        validatedResults.components.push({
          ...component,
          code: formatResult.success ? formatResult.code : component.code,
        });
      } else {
        validatedResults.warnings.push({
          type: "component",
          name: component.name,
          issues: validation.issues,
        });
      }
    }

    // Valider les autres √©l√©ments (tests, stories, APIs)
    // ...

    return validatedResults;
  }

  /**
   * Int√©grer les √©l√©ments g√©n√©r√©s au projet
   */
  async integrateToProject(validatedResults) {
    console.log("üîó Int√©gration au projet...");

    const integrationResult = {
      added: [],
      updated: [],
      skipped: [],
    };

    // Int√©grer les composants
    for (const component of validatedResults.components) {
      try {
        const filePath = await this.writeToProject(
          component.path,
          component.code,
        );
        integrationResult.added.push(filePath);

        // Mettre √† jour l'index barrel si n√©cessaire
        await this.updateBarrelExports(component);
      } catch (error) {
        integrationResult.skipped.push({
          path: component.path,
          reason: error.message,
        });
      }
    }

    // Mettre √† jour package.json si nouvelles d√©pendances
    if (this.projectState.newDependencies) {
      await this.updatePackageJson(this.projectState.newDependencies);
    }

    return integrationResult;
  }

  /**
   * Documenter et apprendre de cette g√©n√©ration
   */
  async documentAndLearn(integrationResult, originalPrompt) {
    console.log("üìö Documentation et apprentissage...");

    // Sauvegarder dans la m√©moire
    await this.memory.saveGeneration({
      prompt: originalPrompt,
      context: this.currentContext,
      results: integrationResult,
      timestamp: new Date().toISOString(),
    });

    // Mettre √† jour le mod√®le d'apprentissage
    await this.learning.recordGenerationResult(
      originalPrompt,
      integrationResult,
    );

    // G√©n√©rer la documentation si n√©cessaire
    if (integrationResult.added.length > 0) {
      await this.generateDocumentation(integrationResult);
    }
  }

  /**
   * G√©rer les erreurs et apprendre d'elles
   */
  async handleError(error, prompt, context) {
    console.error("‚ùå Erreur trait√©e par le cerveau:", error.message);

    // Enregistrer l'erreur pour apprentissage futur
    await this.learning.recordError({
      error: error.message,
      prompt,
      context,
      stack: error.stack,
      timestamp: new Date().toISOString(),
    });

    // Tentative de r√©cup√©ration ou suggestion d'alternative
    return await this.attemptRecovery(error, prompt);
  }

  /**
   * Analyse des exigences avec l'IA
   */
  async analyzeRequirements(prompt, context) {
    try {
      const messages = [
        {
          role: "system",
          content:
            "Tu es un expert en analyse de sp√©cifications techniques. Analyse cette demande et retourne une structure JSON d√©taill√©e.",
        },
        {
          role: "user",
          content: `Analyse cette demande de g√©n√©ration de code: ${prompt}\n\nContexte: ${JSON.stringify(context, null, 2)}`,
        },
      ];

      const response = await this.groqClient.sendRequest(messages);
      const content = response.choices[0]?.message?.content;

      if (!content) {
        throw new Error("No analysis generated");
      }

      // Essayer de parser le JSON, sinon retourner une structure par d√©faut
      try {
        return JSON.parse(content);
      } catch {
        return {
          type: "component",
          complexity: "medium",
          domain: "react",
          confidence: 0.7,
          components: [{ name: "Component", type: "functional" }],
          tests: [],
          stories: [],
          apis: [],
        };
      }
    } catch (error) {
      console.warn(
        "Erreur analyse IA, utilisation de l'analyse par d√©faut:",
        error.message,
      );
      return {
        type: "component",
        complexity: "medium",
        domain: "react",
        confidence: 0.5,
        components: [{ name: "Component", type: "functional" }],
        tests: [],
        stories: [],
        apis: [],
      };
    }
  }

  /**
   * M√©thodes helper (impl√©mentations simplifi√©es)
   */
  prioritizeComponents(components) {
    // Logique de priorisation bas√©e sur l'analyse
    return components.sort((a, b) => (b.priority || 0) - (a.priority || 0));
  }

  async checkDependencies(analysis) {
    // V√©rifier les d√©pendances n√©cessaires
    const requiredDeps = analysis.requiredDependencies || [];
    const missingDeps = [];

    for (const dep of requiredDeps) {
      const isInstalled = await this.memory.checkDependency(dep);
      if (!isInstalled) missingDeps.push(dep);
    }

    return { required: requiredDeps, missing: missingDeps };
  }

  async writeToProject(path, content) {
    // √âcrire le fichier dans le projet (impl√©mentation r√©elle)
    const fs = require("fs").promises;
    const fullPath = `projects/${path}`;

    // Assurer que le dossier existe
    await fs.mkdir(fullPath.split("/").slice(0, -1).join("/"), {
      recursive: true,
    });
    await fs.writeFile(fullPath, content);

    return fullPath;
  }

  async attemptRecovery(error, prompt) {
    // Strat√©gies de r√©cup√©ration basiques
    const recoveryStrategies = {
      timeout: "R√©essayer avec un timeout plus long",
      memory: "Nettoyer la m√©moire et r√©essayer",
      api: "Utiliser une alternative √† Groq",
    };

    let strategy = "Analyse de l'erreur en cours...";
    if (error.message.includes("timeout")) {
      strategy = recoveryStrategies["timeout"];
    } else if (error.message.includes("memory")) {
      strategy = recoveryStrategies["memory"];
    } else if (
      error.message.includes("api") ||
      error.message.includes("Groq")
    ) {
      strategy = recoveryStrategies["api"];
    }

    console.log("‚ö†Ô∏è Tentative de r√©cup√©ration:", strategy);
    // Exemple d'action selon la strat√©gie
    switch (strategy) {
      case recoveryStrategies["timeout"]:
        // Ici, on pourrait relancer la requ√™te avec un timeout augment√©
        // return await retryWithLongerTimeout(prompt);
        break;
      case recoveryStrategies["memory"]:
        // Ici, on pourrait nettoyer la m√©moire ou r√©initialiser des variables
        // await cleanMemory();
        break;
      case recoveryStrategies["api"]:
        // Ici, on pourrait basculer vers une autre API
        // return await useAlternativeApi(prompt);
        break;
      default:
        // Log de l'erreur et retour
        console.error("Erreur non reconnue:", error);
    }
    // Retourne une indication de la strat√©gie utilis√©e
    return strategy;
  }

  async updateBarrelExports(component) {
    // Impl√©mentation simplifi√©e
    console.log("üì¶ Mise √† jour des exports barrel pour", component.name);
  }

  async updatePackageJson(dependencies) {
    // Impl√©mentation simplifi√©e
    console.log("üìù Mise √† jour package.json avec", dependencies);
  }

  async generateDocumentation(results) {
    // Impl√©mentation simplifi√©e
    console.log(
      "üìö G√©n√©ration documentation pour",
      results.added.length,
      "fichiers",
    );
  }
}

export default JarvisBrain;
